{"version":3,"file":"main.js","sources":["../node_modules/drizzle-orm/entity.js","../node_modules/drizzle-orm/logger.js","../node_modules/drizzle-orm/table.utils.js","../node_modules/drizzle-orm/table.js","../node_modules/drizzle-orm/column.js","../node_modules/drizzle-orm/column-builder.js","../node_modules/drizzle-orm/pg-core/columns/enum.js","../node_modules/drizzle-orm/subquery.js","../node_modules/drizzle-orm/tracing.js","../node_modules/drizzle-orm/view-common.js","../node_modules/drizzle-orm/sql/sql.js","../node_modules/drizzle-orm/utils.js","../node_modules/drizzle-orm/pg-core/table.js","../node_modules/drizzle-orm/pg-core/primary-keys.js","../node_modules/drizzle-orm/sql/expressions/conditions.js","../node_modules/drizzle-orm/sql/expressions/select.js","../node_modules/drizzle-orm/relations.js","../node_modules/drizzle-orm/alias.js","../node_modules/drizzle-orm/selection-proxy.js","../node_modules/drizzle-orm/query-promise.js","../node_modules/drizzle-orm/sqlite-core/foreign-keys.js","../node_modules/drizzle-orm/sqlite-core/unique-constraint.js","../node_modules/drizzle-orm/sqlite-core/columns/common.js","../node_modules/drizzle-orm/sqlite-core/columns/blob.js","../node_modules/drizzle-orm/sqlite-core/columns/custom.js","../node_modules/drizzle-orm/sqlite-core/columns/integer.js","../node_modules/drizzle-orm/sqlite-core/columns/numeric.js","../node_modules/drizzle-orm/sqlite-core/columns/real.js","../node_modules/drizzle-orm/sqlite-core/columns/text.js","../node_modules/drizzle-orm/sqlite-core/columns/all.js","../node_modules/drizzle-orm/sqlite-core/table.js","../node_modules/drizzle-orm/sqlite-core/utils.js","../node_modules/drizzle-orm/sqlite-core/query-builders/delete.js","../node_modules/drizzle-orm/casing.js","../node_modules/drizzle-orm/errors.js","../node_modules/drizzle-orm/sqlite-core/view-base.js","../node_modules/drizzle-orm/sqlite-core/dialect.js","../node_modules/drizzle-orm/query-builders/query-builder.js","../node_modules/drizzle-orm/sqlite-core/query-builders/select.js","../node_modules/drizzle-orm/sqlite-core/query-builders/query-builder.js","../node_modules/drizzle-orm/sqlite-core/query-builders/insert.js","../node_modules/drizzle-orm/sqlite-core/query-builders/update.js","../node_modules/drizzle-orm/sqlite-core/query-builders/count.js","../node_modules/drizzle-orm/sqlite-core/query-builders/query.js","../node_modules/drizzle-orm/sqlite-core/query-builders/raw.js","../node_modules/drizzle-orm/sqlite-core/db.js","../node_modules/drizzle-orm/cache/core/cache.js","../node_modules/drizzle-orm/sqlite-core/session.js","../node_modules/drizzle-orm/better-sqlite3/session.js","../node_modules/drizzle-orm/better-sqlite3/driver.js","../node_modules/drizzle-orm/migrator.js","../node_modules/drizzle-orm/better-sqlite3/migrator.js","../src/database/schema.ts","../src/database/connection.ts","../electron/main.ts"],"sourcesContent":["const entityKind = Symbol.for(\"drizzle:entityKind\");\nconst hasOwnEntityKind = Symbol.for(\"drizzle:hasOwnEntityKind\");\nfunction is(value, type) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n  if (value instanceof type) {\n    return true;\n  }\n  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n    throw new Error(\n      `Class \"${type.name ?? \"<unknown>\"}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`\n    );\n  }\n  let cls = Object.getPrototypeOf(value).constructor;\n  if (cls) {\n    while (cls) {\n      if (entityKind in cls && cls[entityKind] === type[entityKind]) {\n        return true;\n      }\n      cls = Object.getPrototypeOf(cls);\n    }\n  }\n  return false;\n}\nexport {\n  entityKind,\n  hasOwnEntityKind,\n  is\n};\n//# sourceMappingURL=entity.js.map","import { entityKind } from \"./entity.js\";\nclass ConsoleLogWriter {\n  static [entityKind] = \"ConsoleLogWriter\";\n  write(message) {\n    console.log(message);\n  }\n}\nclass DefaultLogger {\n  static [entityKind] = \"DefaultLogger\";\n  writer;\n  constructor(config) {\n    this.writer = config?.writer ?? new ConsoleLogWriter();\n  }\n  logQuery(query, params) {\n    const stringifiedParams = params.map((p) => {\n      try {\n        return JSON.stringify(p);\n      } catch {\n        return String(p);\n      }\n    });\n    const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(\", \")}]` : \"\";\n    this.writer.write(`Query: ${query}${paramsStr}`);\n  }\n}\nclass NoopLogger {\n  static [entityKind] = \"NoopLogger\";\n  logQuery() {\n  }\n}\nexport {\n  ConsoleLogWriter,\n  DefaultLogger,\n  NoopLogger\n};\n//# sourceMappingURL=logger.js.map","const TableName = Symbol.for(\"drizzle:Name\");\nexport {\n  TableName\n};\n//# sourceMappingURL=table.utils.js.map","import { entityKind } from \"./entity.js\";\nimport { TableName } from \"./table.utils.js\";\nconst Schema = Symbol.for(\"drizzle:Schema\");\nconst Columns = Symbol.for(\"drizzle:Columns\");\nconst ExtraConfigColumns = Symbol.for(\"drizzle:ExtraConfigColumns\");\nconst OriginalName = Symbol.for(\"drizzle:OriginalName\");\nconst BaseName = Symbol.for(\"drizzle:BaseName\");\nconst IsAlias = Symbol.for(\"drizzle:IsAlias\");\nconst ExtraConfigBuilder = Symbol.for(\"drizzle:ExtraConfigBuilder\");\nconst IsDrizzleTable = Symbol.for(\"drizzle:IsDrizzleTable\");\nclass Table {\n  static [entityKind] = \"Table\";\n  /** @internal */\n  static Symbol = {\n    Name: TableName,\n    Schema,\n    OriginalName,\n    Columns,\n    ExtraConfigColumns,\n    BaseName,\n    IsAlias,\n    ExtraConfigBuilder\n  };\n  /**\n   * @internal\n   * Can be changed if the table is aliased.\n   */\n  [TableName];\n  /**\n   * @internal\n   * Used to store the original name of the table, before any aliasing.\n   */\n  [OriginalName];\n  /** @internal */\n  [Schema];\n  /** @internal */\n  [Columns];\n  /** @internal */\n  [ExtraConfigColumns];\n  /**\n   *  @internal\n   * Used to store the table name before the transformation via the `tableCreator` functions.\n   */\n  [BaseName];\n  /** @internal */\n  [IsAlias] = false;\n  /** @internal */\n  [IsDrizzleTable] = true;\n  /** @internal */\n  [ExtraConfigBuilder] = void 0;\n  constructor(name, schema, baseName) {\n    this[TableName] = this[OriginalName] = name;\n    this[Schema] = schema;\n    this[BaseName] = baseName;\n  }\n}\nfunction isTable(table) {\n  return typeof table === \"object\" && table !== null && IsDrizzleTable in table;\n}\nfunction getTableName(table) {\n  return table[TableName];\n}\nfunction getTableUniqueName(table) {\n  return `${table[Schema] ?? \"public\"}.${table[TableName]}`;\n}\nexport {\n  BaseName,\n  Columns,\n  ExtraConfigBuilder,\n  ExtraConfigColumns,\n  IsAlias,\n  OriginalName,\n  Schema,\n  Table,\n  getTableName,\n  getTableUniqueName,\n  isTable\n};\n//# sourceMappingURL=table.js.map","import { entityKind } from \"./entity.js\";\nclass Column {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n    this.name = config.name;\n    this.keyAsName = config.keyAsName;\n    this.notNull = config.notNull;\n    this.default = config.default;\n    this.defaultFn = config.defaultFn;\n    this.onUpdateFn = config.onUpdateFn;\n    this.hasDefault = config.hasDefault;\n    this.primary = config.primaryKey;\n    this.isUnique = config.isUnique;\n    this.uniqueName = config.uniqueName;\n    this.uniqueType = config.uniqueType;\n    this.dataType = config.dataType;\n    this.columnType = config.columnType;\n    this.generated = config.generated;\n    this.generatedIdentity = config.generatedIdentity;\n  }\n  static [entityKind] = \"Column\";\n  name;\n  keyAsName;\n  primary;\n  notNull;\n  default;\n  defaultFn;\n  onUpdateFn;\n  hasDefault;\n  isUnique;\n  uniqueName;\n  uniqueType;\n  dataType;\n  columnType;\n  enumValues = void 0;\n  generated = void 0;\n  generatedIdentity = void 0;\n  config;\n  mapFromDriverValue(value) {\n    return value;\n  }\n  mapToDriverValue(value) {\n    return value;\n  }\n  // ** @internal */\n  shouldDisableInsert() {\n    return this.config.generated !== void 0 && this.config.generated.type !== \"byDefault\";\n  }\n}\nexport {\n  Column\n};\n//# sourceMappingURL=column.js.map","import { entityKind } from \"./entity.js\";\nclass ColumnBuilder {\n  static [entityKind] = \"ColumnBuilder\";\n  config;\n  constructor(name, dataType, columnType) {\n    this.config = {\n      name,\n      keyAsName: name === \"\",\n      notNull: false,\n      default: void 0,\n      hasDefault: false,\n      primaryKey: false,\n      isUnique: false,\n      uniqueName: void 0,\n      uniqueType: void 0,\n      dataType,\n      columnType,\n      generated: void 0\n    };\n  }\n  /**\n   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n   *\n   * @example\n   * ```ts\n   * const users = pgTable('users', {\n   * \tid: integer('id').$type<UserId>().primaryKey(),\n   * \tdetails: json('details').$type<UserDetails>().notNull(),\n   * });\n   * ```\n   */\n  $type() {\n    return this;\n  }\n  /**\n   * Adds a `not null` clause to the column definition.\n   *\n   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n   */\n  notNull() {\n    this.config.notNull = true;\n    return this;\n  }\n  /**\n   * Adds a `default <value>` clause to the column definition.\n   *\n   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n   *\n   * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n   */\n  default(value) {\n    this.config.default = value;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Adds a dynamic default value to the column.\n   * The function will be called when the row is inserted, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $defaultFn(fn) {\n    this.config.defaultFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $defaultFn}.\n   */\n  $default = this.$defaultFn;\n  /**\n   * Adds a dynamic update value to the column.\n   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n   *\n   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n   */\n  $onUpdateFn(fn) {\n    this.config.onUpdateFn = fn;\n    this.config.hasDefault = true;\n    return this;\n  }\n  /**\n   * Alias for {@link $onUpdateFn}.\n   */\n  $onUpdate = this.$onUpdateFn;\n  /**\n   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n   *\n   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n   */\n  primaryKey() {\n    this.config.primaryKey = true;\n    this.config.notNull = true;\n    return this;\n  }\n  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n  setName(name) {\n    if (this.config.name !== \"\") return;\n    this.config.name = name;\n  }\n}\nexport {\n  ColumnBuilder\n};\n//# sourceMappingURL=column-builder.js.map","import { entityKind } from \"../../entity.js\";\nimport { PgColumn, PgColumnBuilder } from \"./common.js\";\nclass PgEnumObjectColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumObjectColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumObjectColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumObjectColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumObjectColumn extends PgColumn {\n  static [entityKind] = \"PgEnumObjectColumn\";\n  enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nconst isPgEnumSym = Symbol.for(\"drizzle:isPgEnum\");\nfunction isPgEnum(obj) {\n  return !!obj && typeof obj === \"function\" && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\nclass PgEnumColumnBuilder extends PgColumnBuilder {\n  static [entityKind] = \"PgEnumColumnBuilder\";\n  constructor(name, enumInstance) {\n    super(name, \"string\", \"PgEnumColumn\");\n    this.config.enum = enumInstance;\n  }\n  /** @internal */\n  build(table) {\n    return new PgEnumColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass PgEnumColumn extends PgColumn {\n  static [entityKind] = \"PgEnumColumn\";\n  enum = this.config.enum;\n  enumValues = this.config.enum.enumValues;\n  constructor(table, config) {\n    super(table, config);\n    this.enum = config.enum;\n  }\n  getSQLType() {\n    return this.enum.enumName;\n  }\n}\nfunction pgEnum(enumName, input) {\n  return Array.isArray(input) ? pgEnumWithSchema(enumName, [...input], void 0) : pgEnumObjectWithSchema(enumName, input, void 0);\n}\nfunction pgEnumWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: values,\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nfunction pgEnumObjectWithSchema(enumName, values, schema) {\n  const enumInstance = Object.assign(\n    (name) => new PgEnumObjectColumnBuilder(name ?? \"\", enumInstance),\n    {\n      enumName,\n      enumValues: Object.values(values),\n      schema,\n      [isPgEnumSym]: true\n    }\n  );\n  return enumInstance;\n}\nexport {\n  PgEnumColumn,\n  PgEnumColumnBuilder,\n  PgEnumObjectColumn,\n  PgEnumObjectColumnBuilder,\n  isPgEnum,\n  pgEnum,\n  pgEnumObjectWithSchema,\n  pgEnumWithSchema\n};\n//# sourceMappingURL=enum.js.map","import { entityKind } from \"./entity.js\";\nclass Subquery {\n  static [entityKind] = \"Subquery\";\n  constructor(sql, fields, alias, isWith = false, usedTables = []) {\n    this._ = {\n      brand: \"Subquery\",\n      sql,\n      selectedFields: fields,\n      alias,\n      isWith,\n      usedTables\n    };\n  }\n  // getSQL(): SQL<unknown> {\n  // \treturn new SQL([this]);\n  // }\n}\nclass WithSubquery extends Subquery {\n  static [entityKind] = \"WithSubquery\";\n}\nexport {\n  Subquery,\n  WithSubquery\n};\n//# sourceMappingURL=subquery.js.map","import { iife } from \"./tracing-utils.js\";\nimport { npmVersion } from \"./version.js\";\nlet otel;\nlet rawTracer;\nconst tracer = {\n  startActiveSpan(name, fn) {\n    if (!otel) {\n      return fn();\n    }\n    if (!rawTracer) {\n      rawTracer = otel.trace.getTracer(\"drizzle-orm\", npmVersion);\n    }\n    return iife(\n      (otel2, rawTracer2) => rawTracer2.startActiveSpan(\n        name,\n        (span) => {\n          try {\n            return fn(span);\n          } catch (e) {\n            span.setStatus({\n              code: otel2.SpanStatusCode.ERROR,\n              message: e instanceof Error ? e.message : \"Unknown error\"\n              // eslint-disable-line no-instanceof/no-instanceof\n            });\n            throw e;\n          } finally {\n            span.end();\n          }\n        }\n      ),\n      otel,\n      rawTracer\n    );\n  }\n};\nexport {\n  tracer\n};\n//# sourceMappingURL=tracing.js.map","const ViewBaseConfig = Symbol.for(\"drizzle:ViewBaseConfig\");\nexport {\n  ViewBaseConfig\n};\n//# sourceMappingURL=view-common.js.map","import { entityKind, is } from \"../entity.js\";\nimport { isPgEnum } from \"../pg-core/columns/enum.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { tracer } from \"../tracing.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { Column } from \"../column.js\";\nimport { IsAlias, Table } from \"../table.js\";\nclass FakePrimitiveParam {\n  static [entityKind] = \"FakePrimitiveParam\";\n}\nfunction isSQLWrapper(value) {\n  return value !== null && value !== void 0 && typeof value.getSQL === \"function\";\n}\nfunction mergeQueries(queries) {\n  const result = { sql: \"\", params: [] };\n  for (const query of queries) {\n    result.sql += query.sql;\n    result.params.push(...query.params);\n    if (query.typings?.length) {\n      if (!result.typings) {\n        result.typings = [];\n      }\n      result.typings.push(...query.typings);\n    }\n  }\n  return result;\n}\nclass StringChunk {\n  static [entityKind] = \"StringChunk\";\n  value;\n  constructor(value) {\n    this.value = Array.isArray(value) ? value : [value];\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nclass SQL {\n  constructor(queryChunks) {\n    this.queryChunks = queryChunks;\n    for (const chunk of queryChunks) {\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        this.usedTables.push(\n          schemaName === void 0 ? chunk[Table.Symbol.Name] : schemaName + \".\" + chunk[Table.Symbol.Name]\n        );\n      }\n    }\n  }\n  static [entityKind] = \"SQL\";\n  /** @internal */\n  decoder = noopDecoder;\n  shouldInlineParams = false;\n  /** @internal */\n  usedTables = [];\n  append(query) {\n    this.queryChunks.push(...query.queryChunks);\n    return this;\n  }\n  toQuery(config) {\n    return tracer.startActiveSpan(\"drizzle.buildSQL\", (span) => {\n      const query = this.buildQueryFromSourceParams(this.queryChunks, config);\n      span?.setAttributes({\n        \"drizzle.query.text\": query.sql,\n        \"drizzle.query.params\": JSON.stringify(query.params)\n      });\n      return query;\n    });\n  }\n  buildQueryFromSourceParams(chunks, _config) {\n    const config = Object.assign({}, _config, {\n      inlineParams: _config.inlineParams || this.shouldInlineParams,\n      paramStartIndex: _config.paramStartIndex || { value: 0 }\n    });\n    const {\n      casing,\n      escapeName,\n      escapeParam,\n      prepareTyping,\n      inlineParams,\n      paramStartIndex\n    } = config;\n    return mergeQueries(chunks.map((chunk) => {\n      if (is(chunk, StringChunk)) {\n        return { sql: chunk.value.join(\"\"), params: [] };\n      }\n      if (is(chunk, Name)) {\n        return { sql: escapeName(chunk.value), params: [] };\n      }\n      if (chunk === void 0) {\n        return { sql: \"\", params: [] };\n      }\n      if (Array.isArray(chunk)) {\n        const result = [new StringChunk(\"(\")];\n        for (const [i, p] of chunk.entries()) {\n          result.push(p);\n          if (i < chunk.length - 1) {\n            result.push(new StringChunk(\", \"));\n          }\n        }\n        result.push(new StringChunk(\")\"));\n        return this.buildQueryFromSourceParams(result, config);\n      }\n      if (is(chunk, SQL)) {\n        return this.buildQueryFromSourceParams(chunk.queryChunks, {\n          ...config,\n          inlineParams: inlineParams || chunk.shouldInlineParams\n        });\n      }\n      if (is(chunk, Table)) {\n        const schemaName = chunk[Table.Symbol.Schema];\n        const tableName = chunk[Table.Symbol.Name];\n        return {\n          sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + \".\" + escapeName(tableName),\n          params: []\n        };\n      }\n      if (is(chunk, Column)) {\n        const columnName = casing.getColumnCasing(chunk);\n        if (_config.invokeSource === \"indexes\") {\n          return { sql: escapeName(columnName), params: [] };\n        }\n        const schemaName = chunk.table[Table.Symbol.Schema];\n        return {\n          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName) : escapeName(schemaName) + \".\" + escapeName(chunk.table[Table.Symbol.Name]) + \".\" + escapeName(columnName),\n          params: []\n        };\n      }\n      if (is(chunk, View)) {\n        const schemaName = chunk[ViewBaseConfig].schema;\n        const viewName = chunk[ViewBaseConfig].name;\n        return {\n          sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + \".\" + escapeName(viewName),\n          params: []\n        };\n      }\n      if (is(chunk, Param)) {\n        if (is(chunk.value, Placeholder)) {\n          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n        }\n        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n        if (is(mappedValue, SQL)) {\n          return this.buildQueryFromSourceParams([mappedValue], config);\n        }\n        if (inlineParams) {\n          return { sql: this.mapInlineParam(mappedValue, config), params: [] };\n        }\n        let typings = [\"none\"];\n        if (prepareTyping) {\n          typings = [prepareTyping(chunk.encoder)];\n        }\n        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n      }\n      if (is(chunk, Placeholder)) {\n        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n      }\n      if (is(chunk, SQL.Aliased) && chunk.fieldAlias !== void 0) {\n        return { sql: escapeName(chunk.fieldAlias), params: [] };\n      }\n      if (is(chunk, Subquery)) {\n        if (chunk._.isWith) {\n          return { sql: escapeName(chunk._.alias), params: [] };\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk._.sql,\n          new StringChunk(\") \"),\n          new Name(chunk._.alias)\n        ], config);\n      }\n      if (isPgEnum(chunk)) {\n        if (chunk.schema) {\n          return { sql: escapeName(chunk.schema) + \".\" + escapeName(chunk.enumName), params: [] };\n        }\n        return { sql: escapeName(chunk.enumName), params: [] };\n      }\n      if (isSQLWrapper(chunk)) {\n        if (chunk.shouldOmitSQLParens?.()) {\n          return this.buildQueryFromSourceParams([chunk.getSQL()], config);\n        }\n        return this.buildQueryFromSourceParams([\n          new StringChunk(\"(\"),\n          chunk.getSQL(),\n          new StringChunk(\")\")\n        ], config);\n      }\n      if (inlineParams) {\n        return { sql: this.mapInlineParam(chunk, config), params: [] };\n      }\n      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: [\"none\"] };\n    }));\n  }\n  mapInlineParam(chunk, { escapeString }) {\n    if (chunk === null) {\n      return \"null\";\n    }\n    if (typeof chunk === \"number\" || typeof chunk === \"boolean\") {\n      return chunk.toString();\n    }\n    if (typeof chunk === \"string\") {\n      return escapeString(chunk);\n    }\n    if (typeof chunk === \"object\") {\n      const mappedValueAsString = chunk.toString();\n      if (mappedValueAsString === \"[object Object]\") {\n        return escapeString(JSON.stringify(chunk));\n      }\n      return escapeString(mappedValueAsString);\n    }\n    throw new Error(\"Unexpected param value: \" + chunk);\n  }\n  getSQL() {\n    return this;\n  }\n  as(alias) {\n    if (alias === void 0) {\n      return this;\n    }\n    return new SQL.Aliased(this, alias);\n  }\n  mapWith(decoder) {\n    this.decoder = typeof decoder === \"function\" ? { mapFromDriverValue: decoder } : decoder;\n    return this;\n  }\n  inlineParams() {\n    this.shouldInlineParams = true;\n    return this;\n  }\n  /**\n   * This method is used to conditionally include a part of the query.\n   *\n   * @param condition - Condition to check\n   * @returns itself if the condition is `true`, otherwise `undefined`\n   */\n  if(condition) {\n    return condition ? this : void 0;\n  }\n}\nclass Name {\n  constructor(value) {\n    this.value = value;\n  }\n  static [entityKind] = \"Name\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction name(value) {\n  return new Name(value);\n}\nfunction isDriverValueEncoder(value) {\n  return typeof value === \"object\" && value !== null && \"mapToDriverValue\" in value && typeof value.mapToDriverValue === \"function\";\n}\nconst noopDecoder = {\n  mapFromDriverValue: (value) => value\n};\nconst noopEncoder = {\n  mapToDriverValue: (value) => value\n};\nconst noopMapper = {\n  ...noopDecoder,\n  ...noopEncoder\n};\nclass Param {\n  /**\n   * @param value - Parameter value\n   * @param encoder - Encoder to convert the value to a driver parameter\n   */\n  constructor(value, encoder = noopEncoder) {\n    this.value = value;\n    this.encoder = encoder;\n  }\n  static [entityKind] = \"Param\";\n  brand;\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction param(value, encoder) {\n  return new Param(value, encoder);\n}\nfunction sql(strings, ...params) {\n  const queryChunks = [];\n  if (params.length > 0 || strings.length > 0 && strings[0] !== \"\") {\n    queryChunks.push(new StringChunk(strings[0]));\n  }\n  for (const [paramIndex, param2] of params.entries()) {\n    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));\n  }\n  return new SQL(queryChunks);\n}\n((sql2) => {\n  function empty() {\n    return new SQL([]);\n  }\n  sql2.empty = empty;\n  function fromList(list) {\n    return new SQL(list);\n  }\n  sql2.fromList = fromList;\n  function raw(str) {\n    return new SQL([new StringChunk(str)]);\n  }\n  sql2.raw = raw;\n  function join(chunks, separator) {\n    const result = [];\n    for (const [i, chunk] of chunks.entries()) {\n      if (i > 0 && separator !== void 0) {\n        result.push(separator);\n      }\n      result.push(chunk);\n    }\n    return new SQL(result);\n  }\n  sql2.join = join;\n  function identifier(value) {\n    return new Name(value);\n  }\n  sql2.identifier = identifier;\n  function placeholder2(name2) {\n    return new Placeholder(name2);\n  }\n  sql2.placeholder = placeholder2;\n  function param2(value, encoder) {\n    return new Param(value, encoder);\n  }\n  sql2.param = param2;\n})(sql || (sql = {}));\n((SQL2) => {\n  class Aliased {\n    constructor(sql2, fieldAlias) {\n      this.sql = sql2;\n      this.fieldAlias = fieldAlias;\n    }\n    static [entityKind] = \"SQL.Aliased\";\n    /** @internal */\n    isSelectionField = false;\n    getSQL() {\n      return this.sql;\n    }\n    /** @internal */\n    clone() {\n      return new Aliased(this.sql, this.fieldAlias);\n    }\n  }\n  SQL2.Aliased = Aliased;\n})(SQL || (SQL = {}));\nclass Placeholder {\n  constructor(name2) {\n    this.name = name2;\n  }\n  static [entityKind] = \"Placeholder\";\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction placeholder(name2) {\n  return new Placeholder(name2);\n}\nfunction fillPlaceholders(params, values) {\n  return params.map((p) => {\n    if (is(p, Placeholder)) {\n      if (!(p.name in values)) {\n        throw new Error(`No value for placeholder \"${p.name}\" was provided`);\n      }\n      return values[p.name];\n    }\n    if (is(p, Param) && is(p.value, Placeholder)) {\n      if (!(p.value.name in values)) {\n        throw new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n      }\n      return p.encoder.mapToDriverValue(values[p.value.name]);\n    }\n    return p;\n  });\n}\nconst IsDrizzleView = Symbol.for(\"drizzle:IsDrizzleView\");\nclass View {\n  static [entityKind] = \"View\";\n  /** @internal */\n  [ViewBaseConfig];\n  /** @internal */\n  [IsDrizzleView] = true;\n  constructor({ name: name2, schema, selectedFields, query }) {\n    this[ViewBaseConfig] = {\n      name: name2,\n      originalName: name2,\n      schema,\n      selectedFields,\n      query,\n      isExisting: !query,\n      isAlias: false\n    };\n  }\n  getSQL() {\n    return new SQL([this]);\n  }\n}\nfunction isView(view) {\n  return typeof view === \"object\" && view !== null && IsDrizzleView in view;\n}\nfunction getViewName(view) {\n  return view[ViewBaseConfig].name;\n}\nColumn.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nTable.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nSubquery.prototype.getSQL = function() {\n  return new SQL([this]);\n};\nexport {\n  FakePrimitiveParam,\n  Name,\n  Param,\n  Placeholder,\n  SQL,\n  StringChunk,\n  View,\n  fillPlaceholders,\n  getViewName,\n  isDriverValueEncoder,\n  isSQLWrapper,\n  isView,\n  name,\n  noopDecoder,\n  noopEncoder,\n  noopMapper,\n  param,\n  placeholder,\n  sql\n};\n//# sourceMappingURL=sql.js.map","import { Column } from \"./column.js\";\nimport { is } from \"./entity.js\";\nimport { Param, SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { getTableName, Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nfunction mapResultRow(columns, row, joinsNotNullableMap) {\n  const nullifyMap = {};\n  const result = columns.reduce(\n    (result2, { path, field }, columnIndex) => {\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      let node = result2;\n      for (const [pathChunkIndex, pathChunk] of path.entries()) {\n        if (pathChunkIndex < path.length - 1) {\n          if (!(pathChunk in node)) {\n            node[pathChunk] = {};\n          }\n          node = node[pathChunk];\n        } else {\n          const rawValue = row[columnIndex];\n          const value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n            const objectName = path[0];\n            if (!(objectName in nullifyMap)) {\n              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n            } else if (typeof nullifyMap[objectName] === \"string\" && nullifyMap[objectName] !== getTableName(field.table)) {\n              nullifyMap[objectName] = false;\n            }\n          }\n        }\n      }\n      return result2;\n    },\n    {}\n  );\n  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n    for (const [objectName, tableName] of Object.entries(nullifyMap)) {\n      if (typeof tableName === \"string\" && !joinsNotNullableMap[tableName]) {\n        result[objectName] = null;\n      }\n    }\n  }\n  return result;\n}\nfunction orderSelectedFields(fields, pathPrefix) {\n  return Object.entries(fields).reduce((result, [name, field]) => {\n    if (typeof name !== \"string\") {\n      return result;\n    }\n    const newPath = pathPrefix ? [...pathPrefix, name] : [name];\n    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n      result.push({ path: newPath, field });\n    } else if (is(field, Table)) {\n      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n    } else {\n      result.push(...orderSelectedFields(field, newPath));\n    }\n    return result;\n  }, []);\n}\nfunction haveSameKeys(left, right) {\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) {\n    return false;\n  }\n  for (const [index, key] of leftKeys.entries()) {\n    if (key !== rightKeys[index]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction mapUpdateSet(table, values) {\n  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {\n    if (is(value, SQL) || is(value, Column)) {\n      return [key, value];\n    } else {\n      return [key, new Param(value, table[Table.Symbol.Columns][key])];\n    }\n  });\n  if (entries.length === 0) {\n    throw new Error(\"No values to set\");\n  }\n  return Object.fromEntries(entries);\n}\nfunction applyMixins(baseClass, extendedClasses) {\n  for (const extendedClass of extendedClasses) {\n    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n      if (name === \"constructor\") continue;\n      Object.defineProperty(\n        baseClass.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)\n      );\n    }\n  }\n}\nfunction getTableColumns(table) {\n  return table[Table.Symbol.Columns];\n}\nfunction getViewSelectedFields(view) {\n  return view[ViewBaseConfig].selectedFields;\n}\nfunction getTableLikeName(table) {\n  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];\n}\nfunction getColumnNameAndConfig(a, b) {\n  return {\n    name: typeof a === \"string\" && a.length > 0 ? a : \"\",\n    config: typeof a === \"object\" ? a : b\n  };\n}\nconst _ = {};\nconst __ = {};\nfunction isConfig(data) {\n  if (typeof data !== \"object\" || data === null) return false;\n  if (data.constructor.name !== \"Object\") return false;\n  if (\"logger\" in data) {\n    const type = typeof data[\"logger\"];\n    if (type !== \"boolean\" && (type !== \"object\" || typeof data[\"logger\"][\"logQuery\"] !== \"function\") && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"schema\" in data) {\n    const type = typeof data[\"schema\"];\n    if (type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"casing\" in data) {\n    const type = typeof data[\"casing\"];\n    if (type !== \"string\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"mode\" in data) {\n    if (data[\"mode\"] !== \"default\" || data[\"mode\"] !== \"planetscale\" || data[\"mode\"] !== void 0) return false;\n    return true;\n  }\n  if (\"connection\" in data) {\n    const type = typeof data[\"connection\"];\n    if (type !== \"string\" && type !== \"object\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (\"client\" in data) {\n    const type = typeof data[\"client\"];\n    if (type !== \"object\" && type !== \"function\" && type !== \"undefined\") return false;\n    return true;\n  }\n  if (Object.keys(data).length === 0) return true;\n  return false;\n}\nconst textDecoder = typeof TextDecoder === \"undefined\" ? null : new TextDecoder();\nexport {\n  applyMixins,\n  getColumnNameAndConfig,\n  getTableColumns,\n  getTableLikeName,\n  getViewSelectedFields,\n  haveSameKeys,\n  isConfig,\n  mapResultRow,\n  mapUpdateSet,\n  orderSelectedFields,\n  textDecoder\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getPgColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:PgInlineForeignKeys\");\nconst EnableRLS = Symbol.for(\"drizzle:EnableRLS\");\nclass PgTable extends Table {\n  static [entityKind] = \"PgTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys,\n    EnableRLS\n  });\n  /**@internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [EnableRLS] = false;\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n  /** @internal */\n  [Table.Symbol.ExtraConfigColumns] = {};\n}\nfunction pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new PgTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getPgColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const builtColumnsForExtraConfig = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.buildExtraConfigColumn(rawTable);\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n  if (extraConfig) {\n    table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return Object.assign(table, {\n    enableRLS: () => {\n      table[PgTable.Symbol.EnableRLS] = true;\n      return table;\n    }\n  });\n}\nconst pgTable = (name, columns, extraConfig) => {\n  return pgTableWithSchema(name, columns, extraConfig, void 0);\n};\nfunction pgTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return pgTableWithSchema(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  EnableRLS,\n  InlineForeignKeys,\n  PgTable,\n  pgTable,\n  pgTableCreator,\n  pgTableWithSchema\n};\n//# sourceMappingURL=table.js.map","import { entityKind } from \"../entity.js\";\nimport { PgTable } from \"./table.js\";\nfunction primaryKey(...config) {\n  if (config[0].columns) {\n    return new PrimaryKeyBuilder(config[0].columns, config[0].name);\n  }\n  return new PrimaryKeyBuilder(config);\n}\nclass PrimaryKeyBuilder {\n  static [entityKind] = \"PgPrimaryKeyBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  name;\n  constructor(columns, name) {\n    this.columns = columns;\n    this.name = name;\n  }\n  /** @internal */\n  build(table) {\n    return new PrimaryKey(table, this.columns, this.name);\n  }\n}\nclass PrimaryKey {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name;\n  }\n  static [entityKind] = \"PgPrimaryKey\";\n  columns;\n  name;\n  getName() {\n    return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join(\"_\")}_pk`;\n  }\n}\nexport {\n  PrimaryKey,\n  PrimaryKeyBuilder,\n  primaryKey\n};\n//# sourceMappingURL=primary-keys.js.map","import { Column } from \"../../column.js\";\nimport { is } from \"../../entity.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  isDriverValueEncoder,\n  isSQLWrapper,\n  Param,\n  Placeholder,\n  SQL,\n  sql,\n  StringChunk,\n  View\n} from \"../sql.js\";\nfunction bindIfParam(value, column) {\n  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {\n    return new Param(value, column);\n  }\n  return value;\n}\nconst eq = (left, right) => {\n  return sql`${left} = ${bindIfParam(right, left)}`;\n};\nconst ne = (left, right) => {\n  return sql`${left} <> ${bindIfParam(right, left)}`;\n};\nfunction and(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" and \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction or(...unfilteredConditions) {\n  const conditions = unfilteredConditions.filter(\n    (c) => c !== void 0\n  );\n  if (conditions.length === 0) {\n    return void 0;\n  }\n  if (conditions.length === 1) {\n    return new SQL(conditions);\n  }\n  return new SQL([\n    new StringChunk(\"(\"),\n    sql.join(conditions, new StringChunk(\" or \")),\n    new StringChunk(\")\")\n  ]);\n}\nfunction not(condition) {\n  return sql`not ${condition}`;\n}\nconst gt = (left, right) => {\n  return sql`${left} > ${bindIfParam(right, left)}`;\n};\nconst gte = (left, right) => {\n  return sql`${left} >= ${bindIfParam(right, left)}`;\n};\nconst lt = (left, right) => {\n  return sql`${left} < ${bindIfParam(right, left)}`;\n};\nconst lte = (left, right) => {\n  return sql`${left} <= ${bindIfParam(right, left)}`;\n};\nfunction inArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`false`;\n    }\n    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} in ${bindIfParam(values, column)}`;\n}\nfunction notInArray(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      return sql`true`;\n    }\n    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n  }\n  return sql`${column} not in ${bindIfParam(values, column)}`;\n}\nfunction isNull(value) {\n  return sql`${value} is null`;\n}\nfunction isNotNull(value) {\n  return sql`${value} is not null`;\n}\nfunction exists(subquery) {\n  return sql`exists ${subquery}`;\n}\nfunction notExists(subquery) {\n  return sql`not exists ${subquery}`;\n}\nfunction between(column, min, max) {\n  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(\n    max,\n    column\n  )}`;\n}\nfunction notBetween(column, min, max) {\n  return sql`${column} not between ${bindIfParam(\n    min,\n    column\n  )} and ${bindIfParam(max, column)}`;\n}\nfunction like(column, value) {\n  return sql`${column} like ${value}`;\n}\nfunction notLike(column, value) {\n  return sql`${column} not like ${value}`;\n}\nfunction ilike(column, value) {\n  return sql`${column} ilike ${value}`;\n}\nfunction notIlike(column, value) {\n  return sql`${column} not ilike ${value}`;\n}\nfunction arrayContains(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContains requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} @> ${array}`;\n  }\n  return sql`${column} @> ${bindIfParam(values, column)}`;\n}\nfunction arrayContained(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayContained requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} <@ ${array}`;\n  }\n  return sql`${column} <@ ${bindIfParam(values, column)}`;\n}\nfunction arrayOverlaps(column, values) {\n  if (Array.isArray(values)) {\n    if (values.length === 0) {\n      throw new Error(\"arrayOverlaps requires at least one value\");\n    }\n    const array = sql`${bindIfParam(values, column)}`;\n    return sql`${column} && ${array}`;\n  }\n  return sql`${column} && ${bindIfParam(values, column)}`;\n}\nexport {\n  and,\n  arrayContained,\n  arrayContains,\n  arrayOverlaps,\n  between,\n  bindIfParam,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n};\n//# sourceMappingURL=conditions.js.map","import { sql } from \"../sql.js\";\nfunction asc(column) {\n  return sql`${column} asc`;\n}\nfunction desc(column) {\n  return sql`${column} desc`;\n}\nexport {\n  asc,\n  desc\n};\n//# sourceMappingURL=select.js.map","import { getTableUniqueName, Table } from \"./table.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { PrimaryKeyBuilder } from \"./pg-core/primary-keys.js\";\nimport {\n  and,\n  asc,\n  between,\n  desc,\n  eq,\n  exists,\n  gt,\n  gte,\n  ilike,\n  inArray,\n  isNotNull,\n  isNull,\n  like,\n  lt,\n  lte,\n  ne,\n  not,\n  notBetween,\n  notExists,\n  notIlike,\n  notInArray,\n  notLike,\n  or\n} from \"./sql/expressions/index.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nclass Relation {\n  constructor(sourceTable, referencedTable, relationName) {\n    this.sourceTable = sourceTable;\n    this.referencedTable = referencedTable;\n    this.relationName = relationName;\n    this.referencedTableName = referencedTable[Table.Symbol.Name];\n  }\n  static [entityKind] = \"Relation\";\n  referencedTableName;\n  fieldName;\n}\nclass Relations {\n  constructor(table, config) {\n    this.table = table;\n    this.config = config;\n  }\n  static [entityKind] = \"Relations\";\n}\nclass One extends Relation {\n  constructor(sourceTable, referencedTable, config, isNullable) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n    this.isNullable = isNullable;\n  }\n  static [entityKind] = \"One\";\n  withFieldName(fieldName) {\n    const relation = new One(\n      this.sourceTable,\n      this.referencedTable,\n      this.config,\n      this.isNullable\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nclass Many extends Relation {\n  constructor(sourceTable, referencedTable, config) {\n    super(sourceTable, referencedTable, config?.relationName);\n    this.config = config;\n  }\n  static [entityKind] = \"Many\";\n  withFieldName(fieldName) {\n    const relation = new Many(\n      this.sourceTable,\n      this.referencedTable,\n      this.config\n    );\n    relation.fieldName = fieldName;\n    return relation;\n  }\n}\nfunction getOperators() {\n  return {\n    and,\n    between,\n    eq,\n    exists,\n    gt,\n    gte,\n    ilike,\n    inArray,\n    isNull,\n    isNotNull,\n    like,\n    lt,\n    lte,\n    ne,\n    not,\n    notBetween,\n    notExists,\n    notLike,\n    notIlike,\n    notInArray,\n    or,\n    sql\n  };\n}\nfunction getOrderByOperators() {\n  return {\n    sql,\n    asc,\n    desc\n  };\n}\nfunction extractTablesRelationalConfig(schema, configHelpers) {\n  if (Object.keys(schema).length === 1 && \"default\" in schema && !is(schema[\"default\"], Table)) {\n    schema = schema[\"default\"];\n  }\n  const tableNamesMap = {};\n  const relationsBuffer = {};\n  const tablesConfig = {};\n  for (const [key, value] of Object.entries(schema)) {\n    if (is(value, Table)) {\n      const dbName = getTableUniqueName(value);\n      const bufferedRelations = relationsBuffer[dbName];\n      tableNamesMap[dbName] = key;\n      tablesConfig[key] = {\n        tsName: key,\n        dbName: value[Table.Symbol.Name],\n        schema: value[Table.Symbol.Schema],\n        columns: value[Table.Symbol.Columns],\n        relations: bufferedRelations?.relations ?? {},\n        primaryKey: bufferedRelations?.primaryKey ?? []\n      };\n      for (const column of Object.values(\n        value[Table.Symbol.Columns]\n      )) {\n        if (column.primary) {\n          tablesConfig[key].primaryKey.push(column);\n        }\n      }\n      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value[Table.Symbol.ExtraConfigColumns]);\n      if (extraConfig) {\n        for (const configEntry of Object.values(extraConfig)) {\n          if (is(configEntry, PrimaryKeyBuilder)) {\n            tablesConfig[key].primaryKey.push(...configEntry.columns);\n          }\n        }\n      }\n    } else if (is(value, Relations)) {\n      const dbName = getTableUniqueName(value.table);\n      const tableName = tableNamesMap[dbName];\n      const relations2 = value.config(\n        configHelpers(value.table)\n      );\n      let primaryKey;\n      for (const [relationName, relation] of Object.entries(relations2)) {\n        if (tableName) {\n          const tableConfig = tablesConfig[tableName];\n          tableConfig.relations[relationName] = relation;\n          if (primaryKey) {\n            tableConfig.primaryKey.push(...primaryKey);\n          }\n        } else {\n          if (!(dbName in relationsBuffer)) {\n            relationsBuffer[dbName] = {\n              relations: {},\n              primaryKey\n            };\n          }\n          relationsBuffer[dbName].relations[relationName] = relation;\n        }\n      }\n    }\n  }\n  return { tables: tablesConfig, tableNamesMap };\n}\nfunction relations(table, relations2) {\n  return new Relations(\n    table,\n    (helpers) => Object.fromEntries(\n      Object.entries(relations2(helpers)).map(([key, value]) => [\n        key,\n        value.withFieldName(key)\n      ])\n    )\n  );\n}\nfunction createOne(sourceTable) {\n  return function one(table, config) {\n    return new One(\n      sourceTable,\n      table,\n      config,\n      config?.fields.reduce((res, f) => res && f.notNull, true) ?? false\n    );\n  };\n}\nfunction createMany(sourceTable) {\n  return function many(referencedTable, config) {\n    return new Many(sourceTable, referencedTable, config);\n  };\n}\nfunction normalizeRelation(schema, tableNamesMap, relation) {\n  if (is(relation, One) && relation.config) {\n    return {\n      fields: relation.config.fields,\n      references: relation.config.references\n    };\n  }\n  const referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n  if (!referencedTableTsName) {\n    throw new Error(\n      `Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const referencedTableConfig = schema[referencedTableTsName];\n  if (!referencedTableConfig) {\n    throw new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n  }\n  const sourceTable = relation.sourceTable;\n  const sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n  if (!sourceTableTsName) {\n    throw new Error(\n      `Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`\n    );\n  }\n  const reverseRelations = [];\n  for (const referencedTableRelation of Object.values(\n    referencedTableConfig.relations\n  )) {\n    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {\n      reverseRelations.push(referencedTableRelation);\n    }\n  }\n  if (reverseRelations.length > 1) {\n    throw relation.relationName ? new Error(\n      `There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`\n    ) : new Error(\n      `There are multiple relations between \"${referencedTableTsName}\" and \"${relation.sourceTable[Table.Symbol.Name]}\". Please specify relation name`\n    );\n  }\n  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {\n    return {\n      fields: reverseRelations[0].config.references,\n      references: reverseRelations[0].config.fields\n    };\n  }\n  throw new Error(\n    `There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`\n  );\n}\nfunction createTableRelationsHelpers(sourceTable) {\n  return {\n    one: createOne(sourceTable),\n    many: createMany(sourceTable)\n  };\n}\nfunction mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {\n  const result = {};\n  for (const [\n    selectionItemIndex,\n    selectionItem\n  ] of buildQueryResultSelection.entries()) {\n    if (selectionItem.isJson) {\n      const relation = tableConfig.relations[selectionItem.tsKey];\n      const rawSubRows = row[selectionItemIndex];\n      const subRows = typeof rawSubRows === \"string\" ? JSON.parse(rawSubRows) : rawSubRows;\n      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(\n        tablesConfig,\n        tablesConfig[selectionItem.relationTableTsKey],\n        subRows,\n        selectionItem.selection,\n        mapColumnValue\n      ) : subRows.map(\n        (subRow) => mapRelationalRow(\n          tablesConfig,\n          tablesConfig[selectionItem.relationTableTsKey],\n          subRow,\n          selectionItem.selection,\n          mapColumnValue\n        )\n      );\n    } else {\n      const value = mapColumnValue(row[selectionItemIndex]);\n      const field = selectionItem.field;\n      let decoder;\n      if (is(field, Column)) {\n        decoder = field;\n      } else if (is(field, SQL)) {\n        decoder = field.decoder;\n      } else {\n        decoder = field.sql.decoder;\n      }\n      result[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n    }\n  }\n  return result;\n}\nexport {\n  Many,\n  One,\n  Relation,\n  Relations,\n  createMany,\n  createOne,\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig,\n  getOperators,\n  getOrderByOperators,\n  mapRelationalRow,\n  normalizeRelation,\n  relations\n};\n//# sourceMappingURL=relations.js.map","import { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, sql } from \"./sql/sql.js\";\nimport { Table } from \"./table.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass ColumnAliasProxyHandler {\n  constructor(table) {\n    this.table = table;\n  }\n  static [entityKind] = \"ColumnAliasProxyHandler\";\n  get(columnObj, prop) {\n    if (prop === \"table\") {\n      return this.table;\n    }\n    return columnObj[prop];\n  }\n}\nclass TableAliasProxyHandler {\n  constructor(alias, replaceOriginalName) {\n    this.alias = alias;\n    this.replaceOriginalName = replaceOriginalName;\n  }\n  static [entityKind] = \"TableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === Table.Symbol.IsAlias) {\n      return true;\n    }\n    if (prop === Table.Symbol.Name) {\n      return this.alias;\n    }\n    if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n      return this.alias;\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...target[ViewBaseConfig],\n        name: this.alias,\n        isAlias: true\n      };\n    }\n    if (prop === Table.Symbol.Columns) {\n      const columns = target[Table.Symbol.Columns];\n      if (!columns) {\n        return columns;\n      }\n      const proxiedColumns = {};\n      Object.keys(columns).map((key) => {\n        proxiedColumns[key] = new Proxy(\n          columns[key],\n          new ColumnAliasProxyHandler(new Proxy(target, this))\n        );\n      });\n      return proxiedColumns;\n    }\n    const value = target[prop];\n    if (is(value, Column)) {\n      return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));\n    }\n    return value;\n  }\n}\nclass RelationTableAliasProxyHandler {\n  constructor(alias) {\n    this.alias = alias;\n  }\n  static [entityKind] = \"RelationTableAliasProxyHandler\";\n  get(target, prop) {\n    if (prop === \"sourceTable\") {\n      return aliasedTable(target.sourceTable, this.alias);\n    }\n    return target[prop];\n  }\n}\nfunction aliasedTable(table, tableAlias) {\n  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\nfunction aliasedRelation(relation, tableAlias) {\n  return new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\nfunction aliasedTableColumn(column, tableAlias) {\n  return new Proxy(\n    column,\n    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))\n  );\n}\nfunction mapColumnsInAliasedSQLToAlias(query, alias) {\n  return new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\nfunction mapColumnsInSQLToAlias(query, alias) {\n  return sql.join(query.queryChunks.map((c) => {\n    if (is(c, Column)) {\n      return aliasedTableColumn(c, alias);\n    }\n    if (is(c, SQL)) {\n      return mapColumnsInSQLToAlias(c, alias);\n    }\n    if (is(c, SQL.Aliased)) {\n      return mapColumnsInAliasedSQLToAlias(c, alias);\n    }\n    return c;\n  }));\n}\nexport {\n  ColumnAliasProxyHandler,\n  RelationTableAliasProxyHandler,\n  TableAliasProxyHandler,\n  aliasedRelation,\n  aliasedTable,\n  aliasedTableColumn,\n  mapColumnsInAliasedSQLToAlias,\n  mapColumnsInSQLToAlias\n};\n//# sourceMappingURL=alias.js.map","import { ColumnAliasProxyHandler, TableAliasProxyHandler } from \"./alias.js\";\nimport { Column } from \"./column.js\";\nimport { entityKind, is } from \"./entity.js\";\nimport { SQL, View } from \"./sql/sql.js\";\nimport { Subquery } from \"./subquery.js\";\nimport { ViewBaseConfig } from \"./view-common.js\";\nclass SelectionProxyHandler {\n  static [entityKind] = \"SelectionProxyHandler\";\n  config;\n  constructor(config) {\n    this.config = { ...config };\n  }\n  get(subquery, prop) {\n    if (prop === \"_\") {\n      return {\n        ...subquery[\"_\"],\n        selectedFields: new Proxy(\n          subquery._.selectedFields,\n          this\n        )\n      };\n    }\n    if (prop === ViewBaseConfig) {\n      return {\n        ...subquery[ViewBaseConfig],\n        selectedFields: new Proxy(\n          subquery[ViewBaseConfig].selectedFields,\n          this\n        )\n      };\n    }\n    if (typeof prop === \"symbol\") {\n      return subquery[prop];\n    }\n    const columns = is(subquery, Subquery) ? subquery._.selectedFields : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;\n    const value = columns[prop];\n    if (is(value, SQL.Aliased)) {\n      if (this.config.sqlAliasedBehavior === \"sql\" && !value.isSelectionField) {\n        return value.sql;\n      }\n      const newValue = value.clone();\n      newValue.isSelectionField = true;\n      return newValue;\n    }\n    if (is(value, SQL)) {\n      if (this.config.sqlBehavior === \"sql\") {\n        return value;\n      }\n      throw new Error(\n        `You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`\n      );\n    }\n    if (is(value, Column)) {\n      if (this.config.alias) {\n        return new Proxy(\n          value,\n          new ColumnAliasProxyHandler(\n            new Proxy(\n              value.table,\n              new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)\n            )\n          )\n        );\n      }\n      return value;\n    }\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    return new Proxy(value, new SelectionProxyHandler(this.config));\n  }\n}\nexport {\n  SelectionProxyHandler\n};\n//# sourceMappingURL=selection-proxy.js.map","import { entityKind } from \"./entity.js\";\nclass QueryPromise {\n  static [entityKind] = \"QueryPromise\";\n  [Symbol.toStringTag] = \"QueryPromise\";\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n  then(onFulfilled, onRejected) {\n    return this.execute().then(onFulfilled, onRejected);\n  }\n}\nexport {\n  QueryPromise\n};\n//# sourceMappingURL=query-promise.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nclass ForeignKeyBuilder {\n  static [entityKind] = \"SQLiteForeignKeyBuilder\";\n  /** @internal */\n  reference;\n  /** @internal */\n  _onUpdate;\n  /** @internal */\n  _onDelete;\n  constructor(config, actions) {\n    this.reference = () => {\n      const { name, columns, foreignColumns } = config();\n      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };\n    };\n    if (actions) {\n      this._onUpdate = actions.onUpdate;\n      this._onDelete = actions.onDelete;\n    }\n  }\n  onUpdate(action) {\n    this._onUpdate = action;\n    return this;\n  }\n  onDelete(action) {\n    this._onDelete = action;\n    return this;\n  }\n  /** @internal */\n  build(table) {\n    return new ForeignKey(table, this);\n  }\n}\nclass ForeignKey {\n  constructor(table, builder) {\n    this.table = table;\n    this.reference = builder.reference;\n    this.onUpdate = builder._onUpdate;\n    this.onDelete = builder._onDelete;\n  }\n  static [entityKind] = \"SQLiteForeignKey\";\n  reference;\n  onUpdate;\n  onDelete;\n  getName() {\n    const { name, columns, foreignColumns } = this.reference();\n    const columnNames = columns.map((column) => column.name);\n    const foreignColumnNames = foreignColumns.map((column) => column.name);\n    const chunks = [\n      this.table[TableName],\n      ...columnNames,\n      foreignColumns[0].table[TableName],\n      ...foreignColumnNames\n    ];\n    return name ?? `${chunks.join(\"_\")}_fk`;\n  }\n}\nfunction foreignKey(config) {\n  function mappedConfig() {\n    if (typeof config === \"function\") {\n      const { name, columns, foreignColumns } = config();\n      return {\n        name,\n        columns,\n        foreignColumns\n      };\n    }\n    return config;\n  }\n  return new ForeignKeyBuilder(mappedConfig);\n}\nexport {\n  ForeignKey,\n  ForeignKeyBuilder,\n  foreignKey\n};\n//# sourceMappingURL=foreign-keys.js.map","import { entityKind } from \"../entity.js\";\nimport { TableName } from \"../table.utils.js\";\nfunction uniqueKeyName(table, columns) {\n  return `${table[TableName]}_${columns.join(\"_\")}_unique`;\n}\nfunction unique(name) {\n  return new UniqueOnConstraintBuilder(name);\n}\nclass UniqueConstraintBuilder {\n  constructor(columns, name) {\n    this.name = name;\n    this.columns = columns;\n  }\n  static [entityKind] = \"SQLiteUniqueConstraintBuilder\";\n  /** @internal */\n  columns;\n  /** @internal */\n  build(table) {\n    return new UniqueConstraint(table, this.columns, this.name);\n  }\n}\nclass UniqueOnConstraintBuilder {\n  static [entityKind] = \"SQLiteUniqueOnConstraintBuilder\";\n  /** @internal */\n  name;\n  constructor(name) {\n    this.name = name;\n  }\n  on(...columns) {\n    return new UniqueConstraintBuilder(columns, this.name);\n  }\n}\nclass UniqueConstraint {\n  constructor(table, columns, name) {\n    this.table = table;\n    this.columns = columns;\n    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n  }\n  static [entityKind] = \"SQLiteUniqueConstraint\";\n  columns;\n  name;\n  getName() {\n    return this.name;\n  }\n}\nexport {\n  UniqueConstraint,\n  UniqueConstraintBuilder,\n  UniqueOnConstraintBuilder,\n  unique,\n  uniqueKeyName\n};\n//# sourceMappingURL=unique-constraint.js.map","import { ColumnBuilder } from \"../../column-builder.js\";\nimport { Column } from \"../../column.js\";\nimport { entityKind } from \"../../entity.js\";\nimport { ForeignKeyBuilder } from \"../foreign-keys.js\";\nimport { uniqueKeyName } from \"../unique-constraint.js\";\nclass SQLiteColumnBuilder extends ColumnBuilder {\n  static [entityKind] = \"SQLiteColumnBuilder\";\n  foreignKeyConfigs = [];\n  references(ref, actions = {}) {\n    this.foreignKeyConfigs.push({ ref, actions });\n    return this;\n  }\n  unique(name) {\n    this.config.isUnique = true;\n    this.config.uniqueName = name;\n    return this;\n  }\n  generatedAlwaysAs(as, config) {\n    this.config.generated = {\n      as,\n      type: \"always\",\n      mode: config?.mode ?? \"virtual\"\n    };\n    return this;\n  }\n  /** @internal */\n  buildForeignKeys(column, table) {\n    return this.foreignKeyConfigs.map(({ ref, actions }) => {\n      return ((ref2, actions2) => {\n        const builder = new ForeignKeyBuilder(() => {\n          const foreignColumn = ref2();\n          return { columns: [column], foreignColumns: [foreignColumn] };\n        });\n        if (actions2.onUpdate) {\n          builder.onUpdate(actions2.onUpdate);\n        }\n        if (actions2.onDelete) {\n          builder.onDelete(actions2.onDelete);\n        }\n        return builder.build(table);\n      })(ref, actions);\n    });\n  }\n}\nclass SQLiteColumn extends Column {\n  constructor(table, config) {\n    if (!config.uniqueName) {\n      config.uniqueName = uniqueKeyName(table, [config.name]);\n    }\n    super(table, config);\n    this.table = table;\n  }\n  static [entityKind] = \"SQLiteColumn\";\n}\nexport {\n  SQLiteColumn,\n  SQLiteColumnBuilder\n};\n//# sourceMappingURL=common.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig, textDecoder } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBigInt(table, this.config);\n  }\n}\nclass SQLiteBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBigInt\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return BigInt(buf.toString(\"utf8\"));\n    }\n    return BigInt(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(value.toString());\n  }\n}\nclass SQLiteBlobJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteBlobJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBlobJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobJson\";\n  getSQLType() {\n    return \"blob\";\n  }\n  mapFromDriverValue(value) {\n    if (typeof Buffer !== \"undefined\" && Buffer.from) {\n      const buf = Buffer.isBuffer(value) ? value : value instanceof ArrayBuffer ? Buffer.from(value) : value.buffer ? Buffer.from(value.buffer, value.byteOffset, value.byteLength) : Buffer.from(value);\n      return JSON.parse(buf.toString(\"utf8\"));\n    }\n    return JSON.parse(textDecoder.decode(value));\n  }\n  mapToDriverValue(value) {\n    return Buffer.from(JSON.stringify(value));\n  }\n}\nclass SQLiteBlobBufferBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBlobBufferBuilder\";\n  constructor(name) {\n    super(name, \"buffer\", \"SQLiteBlobBuffer\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteBlobBuffer(table, this.config);\n  }\n}\nclass SQLiteBlobBuffer extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBlobBuffer\";\n  mapFromDriverValue(value) {\n    if (Buffer.isBuffer(value)) {\n      return value;\n    }\n    return Buffer.from(value);\n  }\n  getSQLType() {\n    return \"blob\";\n  }\n}\nfunction blob(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"json\") {\n    return new SQLiteBlobJsonBuilder(name);\n  }\n  if (config?.mode === \"bigint\") {\n    return new SQLiteBigIntBuilder(name);\n  }\n  return new SQLiteBlobBufferBuilder(name);\n}\nexport {\n  SQLiteBigInt,\n  SQLiteBigIntBuilder,\n  SQLiteBlobBuffer,\n  SQLiteBlobBufferBuilder,\n  SQLiteBlobJson,\n  SQLiteBlobJsonBuilder,\n  blob\n};\n//# sourceMappingURL=blob.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteCustomColumnBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteCustomColumnBuilder\";\n  constructor(name, fieldConfig, customTypeParams) {\n    super(name, \"custom\", \"SQLiteCustomColumn\");\n    this.config.fieldConfig = fieldConfig;\n    this.config.customTypeParams = customTypeParams;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteCustomColumn(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteCustomColumn extends SQLiteColumn {\n  static [entityKind] = \"SQLiteCustomColumn\";\n  sqlName;\n  mapTo;\n  mapFrom;\n  constructor(table, config) {\n    super(table, config);\n    this.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n    this.mapTo = config.customTypeParams.toDriver;\n    this.mapFrom = config.customTypeParams.fromDriver;\n  }\n  getSQLType() {\n    return this.sqlName;\n  }\n  mapFromDriverValue(value) {\n    return typeof this.mapFrom === \"function\" ? this.mapFrom(value) : value;\n  }\n  mapToDriverValue(value) {\n    return typeof this.mapTo === \"function\" ? this.mapTo(value) : value;\n  }\n}\nfunction customType(customTypeParams) {\n  return (a, b) => {\n    const { name, config } = getColumnNameAndConfig(a, b);\n    return new SQLiteCustomColumnBuilder(\n      name,\n      config,\n      customTypeParams\n    );\n  };\n}\nexport {\n  SQLiteCustomColumn,\n  SQLiteCustomColumnBuilder,\n  customType\n};\n//# sourceMappingURL=custom.js.map","import { entityKind } from \"../../entity.js\";\nimport { sql } from \"../../sql/sql.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteBaseIntegerBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteBaseIntegerBuilder\";\n  constructor(name, dataType, columnType) {\n    super(name, dataType, columnType);\n    this.config.autoIncrement = false;\n  }\n  primaryKey(config) {\n    if (config?.autoIncrement) {\n      this.config.autoIncrement = true;\n    }\n    this.config.hasDefault = true;\n    return super.primaryKey();\n  }\n}\nclass SQLiteBaseInteger extends SQLiteColumn {\n  static [entityKind] = \"SQLiteBaseInteger\";\n  autoIncrement = this.config.autoIncrement;\n  getSQLType() {\n    return \"integer\";\n  }\n}\nclass SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteIntegerBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteInteger\");\n  }\n  build(table) {\n    return new SQLiteInteger(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteInteger extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteInteger\";\n}\nclass SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteTimestampBuilder\";\n  constructor(name, mode) {\n    super(name, \"date\", \"SQLiteTimestamp\");\n    this.config.mode = mode;\n  }\n  /**\n   * @deprecated Use `default()` with your own expression instead.\n   *\n   * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n   */\n  defaultNow() {\n    return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);\n  }\n  build(table) {\n    return new SQLiteTimestamp(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTimestamp extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteTimestamp\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    if (this.config.mode === \"timestamp\") {\n      return new Date(value * 1e3);\n    }\n    return new Date(value);\n  }\n  mapToDriverValue(value) {\n    const unix = value.getTime();\n    if (this.config.mode === \"timestamp\") {\n      return Math.floor(unix / 1e3);\n    }\n    return unix;\n  }\n}\nclass SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder {\n  static [entityKind] = \"SQLiteBooleanBuilder\";\n  constructor(name, mode) {\n    super(name, \"boolean\", \"SQLiteBoolean\");\n    this.config.mode = mode;\n  }\n  build(table) {\n    return new SQLiteBoolean(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteBoolean extends SQLiteBaseInteger {\n  static [entityKind] = \"SQLiteBoolean\";\n  mode = this.config.mode;\n  mapFromDriverValue(value) {\n    return Number(value) === 1;\n  }\n  mapToDriverValue(value) {\n    return value ? 1 : 0;\n  }\n}\nfunction integer(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config?.mode === \"timestamp\" || config?.mode === \"timestamp_ms\") {\n    return new SQLiteTimestampBuilder(name, config.mode);\n  }\n  if (config?.mode === \"boolean\") {\n    return new SQLiteBooleanBuilder(name, config.mode);\n  }\n  return new SQLiteIntegerBuilder(name);\n}\nconst int = integer;\nexport {\n  SQLiteBaseInteger,\n  SQLiteBaseIntegerBuilder,\n  SQLiteBoolean,\n  SQLiteBooleanBuilder,\n  SQLiteInteger,\n  SQLiteIntegerBuilder,\n  SQLiteTimestamp,\n  SQLiteTimestampBuilder,\n  int,\n  integer\n};\n//# sourceMappingURL=integer.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteNumericBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBuilder\";\n  constructor(name) {\n    super(name, \"string\", \"SQLiteNumeric\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumeric(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumeric extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumeric\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"string\") return value;\n    return String(value);\n  }\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericNumberBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericNumberBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteNumericNumber\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericNumber(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericNumber extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericNumber\";\n  mapFromDriverValue(value) {\n    if (typeof value === \"number\") return value;\n    return Number(value);\n  }\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nclass SQLiteNumericBigIntBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteNumericBigIntBuilder\";\n  constructor(name) {\n    super(name, \"bigint\", \"SQLiteNumericBigInt\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteNumericBigInt(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteNumericBigInt extends SQLiteColumn {\n  static [entityKind] = \"SQLiteNumericBigInt\";\n  mapFromDriverValue = BigInt;\n  mapToDriverValue = String;\n  getSQLType() {\n    return \"numeric\";\n  }\n}\nfunction numeric(a, b) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  const mode = config?.mode;\n  return mode === \"number\" ? new SQLiteNumericNumberBuilder(name) : mode === \"bigint\" ? new SQLiteNumericBigIntBuilder(name) : new SQLiteNumericBuilder(name);\n}\nexport {\n  SQLiteNumeric,\n  SQLiteNumericBigInt,\n  SQLiteNumericBigIntBuilder,\n  SQLiteNumericBuilder,\n  SQLiteNumericNumber,\n  SQLiteNumericNumberBuilder,\n  numeric\n};\n//# sourceMappingURL=numeric.js.map","import { entityKind } from \"../../entity.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteRealBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteRealBuilder\";\n  constructor(name) {\n    super(name, \"number\", \"SQLiteReal\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteReal(table, this.config);\n  }\n}\nclass SQLiteReal extends SQLiteColumn {\n  static [entityKind] = \"SQLiteReal\";\n  getSQLType() {\n    return \"real\";\n  }\n}\nfunction real(name) {\n  return new SQLiteRealBuilder(name ?? \"\");\n}\nexport {\n  SQLiteReal,\n  SQLiteRealBuilder,\n  real\n};\n//# sourceMappingURL=real.js.map","import { entityKind } from \"../../entity.js\";\nimport { getColumnNameAndConfig } from \"../../utils.js\";\nimport { SQLiteColumn, SQLiteColumnBuilder } from \"./common.js\";\nclass SQLiteTextBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextBuilder\";\n  constructor(name, config) {\n    super(name, \"string\", \"SQLiteText\");\n    this.config.enumValues = config.enum;\n    this.config.length = config.length;\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteText(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteText extends SQLiteColumn {\n  static [entityKind] = \"SQLiteText\";\n  enumValues = this.config.enumValues;\n  length = this.config.length;\n  constructor(table, config) {\n    super(table, config);\n  }\n  getSQLType() {\n    return `text${this.config.length ? `(${this.config.length})` : \"\"}`;\n  }\n}\nclass SQLiteTextJsonBuilder extends SQLiteColumnBuilder {\n  static [entityKind] = \"SQLiteTextJsonBuilder\";\n  constructor(name) {\n    super(name, \"json\", \"SQLiteTextJson\");\n  }\n  /** @internal */\n  build(table) {\n    return new SQLiteTextJson(\n      table,\n      this.config\n    );\n  }\n}\nclass SQLiteTextJson extends SQLiteColumn {\n  static [entityKind] = \"SQLiteTextJson\";\n  getSQLType() {\n    return \"text\";\n  }\n  mapFromDriverValue(value) {\n    return JSON.parse(value);\n  }\n  mapToDriverValue(value) {\n    return JSON.stringify(value);\n  }\n}\nfunction text(a, b = {}) {\n  const { name, config } = getColumnNameAndConfig(a, b);\n  if (config.mode === \"json\") {\n    return new SQLiteTextJsonBuilder(name);\n  }\n  return new SQLiteTextBuilder(name, config);\n}\nexport {\n  SQLiteText,\n  SQLiteTextBuilder,\n  SQLiteTextJson,\n  SQLiteTextJsonBuilder,\n  text\n};\n//# sourceMappingURL=text.js.map","import { blob } from \"./blob.js\";\nimport { customType } from \"./custom.js\";\nimport { integer } from \"./integer.js\";\nimport { numeric } from \"./numeric.js\";\nimport { real } from \"./real.js\";\nimport { text } from \"./text.js\";\nfunction getSQLiteColumnBuilders() {\n  return {\n    blob,\n    customType,\n    integer,\n    numeric,\n    real,\n    text\n  };\n}\nexport {\n  getSQLiteColumnBuilders\n};\n//# sourceMappingURL=all.js.map","import { entityKind } from \"../entity.js\";\nimport { Table } from \"../table.js\";\nimport { getSQLiteColumnBuilders } from \"./columns/all.js\";\nconst InlineForeignKeys = Symbol.for(\"drizzle:SQLiteInlineForeignKeys\");\nclass SQLiteTable extends Table {\n  static [entityKind] = \"SQLiteTable\";\n  /** @internal */\n  static Symbol = Object.assign({}, Table.Symbol, {\n    InlineForeignKeys\n  });\n  /** @internal */\n  [Table.Symbol.Columns];\n  /** @internal */\n  [InlineForeignKeys] = [];\n  /** @internal */\n  [Table.Symbol.ExtraConfigBuilder] = void 0;\n}\nfunction sqliteTableBase(name, columns, extraConfig, schema, baseName = name) {\n  const rawTable = new SQLiteTable(name, schema, baseName);\n  const parsedColumns = typeof columns === \"function\" ? columns(getSQLiteColumnBuilders()) : columns;\n  const builtColumns = Object.fromEntries(\n    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {\n      const colBuilder = colBuilderBase;\n      colBuilder.setName(name2);\n      const column = colBuilder.build(rawTable);\n      rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n      return [name2, column];\n    })\n  );\n  const table = Object.assign(rawTable, builtColumns);\n  table[Table.Symbol.Columns] = builtColumns;\n  table[Table.Symbol.ExtraConfigColumns] = builtColumns;\n  if (extraConfig) {\n    table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;\n  }\n  return table;\n}\nconst sqliteTable = (name, columns, extraConfig) => {\n  return sqliteTableBase(name, columns, extraConfig);\n};\nfunction sqliteTableCreator(customizeTableName) {\n  return (name, columns, extraConfig) => {\n    return sqliteTableBase(customizeTableName(name), columns, extraConfig, void 0, name);\n  };\n}\nexport {\n  InlineForeignKeys,\n  SQLiteTable,\n  sqliteTable,\n  sqliteTableCreator\n};\n//# sourceMappingURL=table.js.map","import { is } from \"../entity.js\";\nimport { SQL } from \"../sql/sql.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { Table } from \"../table.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { CheckBuilder } from \"./checks.js\";\nimport { ForeignKeyBuilder } from \"./foreign-keys.js\";\nimport { IndexBuilder } from \"./indexes.js\";\nimport { PrimaryKeyBuilder } from \"./primary-keys.js\";\nimport { SQLiteTable } from \"./table.js\";\nimport { UniqueConstraintBuilder } from \"./unique-constraint.js\";\nfunction getTableConfig(table) {\n  const columns = Object.values(table[SQLiteTable.Symbol.Columns]);\n  const indexes = [];\n  const checks = [];\n  const primaryKeys = [];\n  const uniqueConstraints = [];\n  const foreignKeys = Object.values(table[SQLiteTable.Symbol.InlineForeignKeys]);\n  const name = table[Table.Symbol.Name];\n  const extraConfigBuilder = table[SQLiteTable.Symbol.ExtraConfigBuilder];\n  if (extraConfigBuilder !== void 0) {\n    const extraConfig = extraConfigBuilder(table[SQLiteTable.Symbol.Columns]);\n    const extraValues = Array.isArray(extraConfig) ? extraConfig.flat(1) : Object.values(extraConfig);\n    for (const builder of Object.values(extraValues)) {\n      if (is(builder, IndexBuilder)) {\n        indexes.push(builder.build(table));\n      } else if (is(builder, CheckBuilder)) {\n        checks.push(builder.build(table));\n      } else if (is(builder, UniqueConstraintBuilder)) {\n        uniqueConstraints.push(builder.build(table));\n      } else if (is(builder, PrimaryKeyBuilder)) {\n        primaryKeys.push(builder.build(table));\n      } else if (is(builder, ForeignKeyBuilder)) {\n        foreignKeys.push(builder.build(table));\n      }\n    }\n  }\n  return {\n    columns,\n    indexes,\n    foreignKeys,\n    checks,\n    primaryKeys,\n    uniqueConstraints,\n    name\n  };\n}\nfunction extractUsedTable(table) {\n  if (is(table, SQLiteTable)) {\n    return [`${table[Table.Symbol.BaseName]}`];\n  }\n  if (is(table, Subquery)) {\n    return table._.usedTables ?? [];\n  }\n  if (is(table, SQL)) {\n    return table.usedTables ?? [];\n  }\n  return [];\n}\nfunction getViewConfig(view) {\n  return {\n    ...view[ViewBaseConfig]\n    // ...view[SQLiteViewConfig],\n  };\n}\nexport {\n  extractUsedTable,\n  getTableConfig,\n  getViewConfig\n};\n//# sourceMappingURL=utils.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Table } from \"../../table.js\";\nimport { orderSelectedFields } from \"../../utils.js\";\nimport { extractUsedTable } from \"../utils.js\";\nclass SQLiteDeleteBase extends QueryPromise {\n  constructor(table, session, dialect, withList) {\n    super();\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, withList };\n  }\n  static [entityKind] = \"SQLiteDelete\";\n  /** @internal */\n  config;\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will delete only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be deleted.\n   *\n   * ```ts\n   * // Delete all cars with green color\n   * db.delete(cars).where(eq(cars.color, 'green'));\n   * // or\n   * db.delete(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Delete all BMW cars with a green color\n   * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Delete all cars with the green or blue color\n   * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.table[Table.Symbol.Columns],\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      this.config.orderBy = orderByArray;\n    } else {\n      const orderByArray = columns;\n      this.config.orderBy = orderByArray;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.config.limit = limit;\n    return this;\n  }\n  returning(fields = this.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildDeleteQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"delete\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute(placeholderValues) {\n    return this._prepare().execute(placeholderValues);\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteDeleteBase\n};\n//# sourceMappingURL=delete.js.map","import { entityKind } from \"./entity.js\";\nimport { Table } from \"./table.js\";\nfunction toSnakeCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.map((word) => word.toLowerCase()).join(\"_\");\n}\nfunction toCamelCase(input) {\n  const words = input.replace(/['\\u2019]/g, \"\").match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n  return words.reduce((acc, word, i) => {\n    const formattedWord = i === 0 ? word.toLowerCase() : `${word[0].toUpperCase()}${word.slice(1)}`;\n    return acc + formattedWord;\n  }, \"\");\n}\nfunction noopCase(input) {\n  return input;\n}\nclass CasingCache {\n  static [entityKind] = \"CasingCache\";\n  /** @internal */\n  cache = {};\n  cachedTables = {};\n  convert;\n  constructor(casing) {\n    this.convert = casing === \"snake_case\" ? toSnakeCase : casing === \"camelCase\" ? toCamelCase : noopCase;\n  }\n  getColumnCasing(column) {\n    if (!column.keyAsName) return column.name;\n    const schema = column.table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = column.table[Table.Symbol.OriginalName];\n    const key = `${schema}.${tableName}.${column.name}`;\n    if (!this.cache[key]) {\n      this.cacheTable(column.table);\n    }\n    return this.cache[key];\n  }\n  cacheTable(table) {\n    const schema = table[Table.Symbol.Schema] ?? \"public\";\n    const tableName = table[Table.Symbol.OriginalName];\n    const tableKey = `${schema}.${tableName}`;\n    if (!this.cachedTables[tableKey]) {\n      for (const column of Object.values(table[Table.Symbol.Columns])) {\n        const columnKey = `${tableKey}.${column.name}`;\n        this.cache[columnKey] = this.convert(column.name);\n      }\n      this.cachedTables[tableKey] = true;\n    }\n  }\n  clearCache() {\n    this.cache = {};\n    this.cachedTables = {};\n  }\n}\nexport {\n  CasingCache,\n  toCamelCase,\n  toSnakeCase\n};\n//# sourceMappingURL=casing.js.map","import { entityKind } from \"./entity.js\";\nclass DrizzleError extends Error {\n  static [entityKind] = \"DrizzleError\";\n  constructor({ message, cause }) {\n    super(message);\n    this.name = \"DrizzleError\";\n    this.cause = cause;\n  }\n}\nclass DrizzleQueryError extends Error {\n  constructor(query, params, cause) {\n    super(`Failed query: ${query}\nparams: ${params}`);\n    this.query = query;\n    this.params = params;\n    this.cause = cause;\n    Error.captureStackTrace(this, DrizzleQueryError);\n    if (cause) this.cause = cause;\n  }\n}\nclass TransactionRollbackError extends DrizzleError {\n  static [entityKind] = \"TransactionRollbackError\";\n  constructor() {\n    super({ message: \"Rollback\" });\n  }\n}\nexport {\n  DrizzleError,\n  DrizzleQueryError,\n  TransactionRollbackError\n};\n//# sourceMappingURL=errors.js.map","import { entityKind } from \"../entity.js\";\nimport { View } from \"../sql/sql.js\";\nclass SQLiteViewBase extends View {\n  static [entityKind] = \"SQLiteViewBase\";\n}\nexport {\n  SQLiteViewBase\n};\n//# sourceMappingURL=view-base.js.map","import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from \"../alias.js\";\nimport { CasingCache } from \"../casing.js\";\nimport { Column } from \"../column.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { DrizzleError } from \"../errors.js\";\nimport {\n  getOperators,\n  getOrderByOperators,\n  Many,\n  normalizeRelation,\n  One\n} from \"../relations.js\";\nimport { and, eq } from \"../sql/index.js\";\nimport { Param, SQL, sql } from \"../sql/sql.js\";\nimport { SQLiteColumn } from \"./columns/index.js\";\nimport { SQLiteTable } from \"./table.js\";\nimport { Subquery } from \"../subquery.js\";\nimport { getTableName, getTableUniqueName, Table } from \"../table.js\";\nimport { orderSelectedFields } from \"../utils.js\";\nimport { ViewBaseConfig } from \"../view-common.js\";\nimport { SQLiteViewBase } from \"./view-base.js\";\nclass SQLiteDialect {\n  static [entityKind] = \"SQLiteDialect\";\n  /** @internal */\n  casing;\n  constructor(config) {\n    this.casing = new CasingCache(config?.casing);\n  }\n  escapeName(name) {\n    return `\"${name}\"`;\n  }\n  escapeParam(_num) {\n    return \"?\";\n  }\n  escapeString(str) {\n    return `'${str.replace(/'/g, \"''\")}'`;\n  }\n  buildWithCTE(queries) {\n    if (!queries?.length) return void 0;\n    const withSqlChunks = [sql`with `];\n    for (const [i, w] of queries.entries()) {\n      withSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n      if (i < queries.length - 1) {\n        withSqlChunks.push(sql`, `);\n      }\n    }\n    withSqlChunks.push(sql` `);\n    return sql.join(withSqlChunks);\n  }\n  buildDeleteQuery({ table, where, returning, withList, limit, orderBy }) {\n    const withSql = this.buildWithCTE(withList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    return sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n  }\n  buildUpdateSet(table, set) {\n    const tableColumns = table[Table.Symbol.Columns];\n    const columnNames = Object.keys(tableColumns).filter(\n      (colName) => set[colName] !== void 0 || tableColumns[colName]?.onUpdateFn !== void 0\n    );\n    const setSize = columnNames.length;\n    return sql.join(columnNames.flatMap((colName, i) => {\n      const col = tableColumns[colName];\n      const value = set[colName] ?? sql.param(col.onUpdateFn(), col);\n      const res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n      if (i < setSize - 1) {\n        return [res, sql.raw(\", \")];\n      }\n      return [res];\n    }));\n  }\n  buildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }) {\n    const withSql = this.buildWithCTE(withList);\n    const setSql = this.buildUpdateSet(table, set);\n    const fromSql = from && sql.join([sql.raw(\" from \"), this.buildFromTable(from)]);\n    const joinsSql = this.buildJoins(joins);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    return sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n  }\n  /**\n   * Builds selection SQL with provided fields/expressions\n   *\n   * Examples:\n   *\n   * `select <selection> from`\n   *\n   * `insert ... returning <selection>`\n   *\n   * If `isSingleTable` is true, then columns won't be prefixed with table name\n   */\n  buildSelection(fields, { isSingleTable = false } = {}) {\n    const columnsLen = fields.length;\n    const chunks = fields.flatMap(({ field }, i) => {\n      const chunk = [];\n      if (is(field, SQL.Aliased) && field.isSelectionField) {\n        chunk.push(sql.identifier(field.fieldAlias));\n      } else if (is(field, SQL.Aliased) || is(field, SQL)) {\n        const query = is(field, SQL.Aliased) ? field.sql : field;\n        if (isSingleTable) {\n          chunk.push(\n            new SQL(\n              query.queryChunks.map((c) => {\n                if (is(c, Column)) {\n                  return sql.identifier(this.casing.getColumnCasing(c));\n                }\n                return c;\n              })\n            )\n          );\n        } else {\n          chunk.push(query);\n        }\n        if (is(field, SQL.Aliased)) {\n          chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n        }\n      } else if (is(field, Column)) {\n        const tableName = field.table[Table.Symbol.Name];\n        if (field.columnType === \"SQLiteNumericBigInt\") {\n          if (isSingleTable) {\n            chunk.push(sql`cast(${sql.identifier(this.casing.getColumnCasing(field))} as text)`);\n          } else {\n            chunk.push(\n              sql`cast(${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))} as text)`\n            );\n          }\n        } else {\n          if (isSingleTable) {\n            chunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n          } else {\n            chunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n          }\n        }\n      }\n      if (i < columnsLen - 1) {\n        chunk.push(sql`, `);\n      }\n      return chunk;\n    });\n    return sql.join(chunks);\n  }\n  buildJoins(joins) {\n    if (!joins || joins.length === 0) {\n      return void 0;\n    }\n    const joinsArray = [];\n    if (joins) {\n      for (const [index, joinMeta] of joins.entries()) {\n        if (index === 0) {\n          joinsArray.push(sql` `);\n        }\n        const table = joinMeta.table;\n        const onSql = joinMeta.on ? sql` on ${joinMeta.on}` : void 0;\n        if (is(table, SQLiteTable)) {\n          const tableName = table[SQLiteTable.Symbol.Name];\n          const tableSchema = table[SQLiteTable.Symbol.Schema];\n          const origTableName = table[SQLiteTable.Symbol.OriginalName];\n          const alias = tableName === origTableName ? void 0 : joinMeta.alias;\n          joinsArray.push(\n            sql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`}${onSql}`\n          );\n        } else {\n          joinsArray.push(\n            sql`${sql.raw(joinMeta.joinType)} join ${table}${onSql}`\n          );\n        }\n        if (index < joins.length - 1) {\n          joinsArray.push(sql` `);\n        }\n      }\n    }\n    return sql.join(joinsArray);\n  }\n  buildLimit(limit) {\n    return typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n  }\n  buildOrderBy(orderBy) {\n    const orderByList = [];\n    if (orderBy) {\n      for (const [index, orderByValue] of orderBy.entries()) {\n        orderByList.push(orderByValue);\n        if (index < orderBy.length - 1) {\n          orderByList.push(sql`, `);\n        }\n      }\n    }\n    return orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : void 0;\n  }\n  buildFromTable(table) {\n    if (is(table, Table) && table[Table.Symbol.IsAlias]) {\n      return sql`${sql`${sql.identifier(table[Table.Symbol.Schema] ?? \"\")}.`.if(table[Table.Symbol.Schema])}${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n    }\n    return table;\n  }\n  buildSelectQuery({\n    withList,\n    fields,\n    fieldsFlat,\n    where,\n    having,\n    table,\n    joins,\n    orderBy,\n    groupBy,\n    limit,\n    offset,\n    distinct,\n    setOperators\n  }) {\n    const fieldsList = fieldsFlat ?? orderSelectedFields(fields);\n    for (const f of fieldsList) {\n      if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table._.alias : is(table, SQLiteViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(\n        ({ alias }) => alias === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])\n      ))(f.field.table)) {\n        const tableName = getTableName(f.field.table);\n        throw new Error(\n          `Your \"${f.path.join(\"->\")}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`\n        );\n      }\n    }\n    const isSingleTable = !joins || joins.length === 0;\n    const withSql = this.buildWithCTE(withList);\n    const distinctSql = distinct ? sql` distinct` : void 0;\n    const selection = this.buildSelection(fieldsList, { isSingleTable });\n    const tableSql = this.buildFromTable(table);\n    const joinsSql = this.buildJoins(joins);\n    const whereSql = where ? sql` where ${where}` : void 0;\n    const havingSql = having ? sql` having ${having}` : void 0;\n    const groupByList = [];\n    if (groupBy) {\n      for (const [index, groupByValue] of groupBy.entries()) {\n        groupByList.push(groupByValue);\n        if (index < groupBy.length - 1) {\n          groupByList.push(sql`, `);\n        }\n      }\n    }\n    const groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : void 0;\n    const orderBySql = this.buildOrderBy(orderBy);\n    const limitSql = this.buildLimit(limit);\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n    if (setOperators.length > 0) {\n      return this.buildSetOperations(finalQuery, setOperators);\n    }\n    return finalQuery;\n  }\n  buildSetOperations(leftSelect, setOperators) {\n    const [setOperator, ...rest] = setOperators;\n    if (!setOperator) {\n      throw new Error(\"Cannot pass undefined values to any set operator\");\n    }\n    if (rest.length === 0) {\n      return this.buildSetOperationQuery({ leftSelect, setOperator });\n    }\n    return this.buildSetOperations(\n      this.buildSetOperationQuery({ leftSelect, setOperator }),\n      rest\n    );\n  }\n  buildSetOperationQuery({\n    leftSelect,\n    setOperator: { type, isAll, rightSelect, limit, orderBy, offset }\n  }) {\n    const leftChunk = sql`${leftSelect.getSQL()} `;\n    const rightChunk = sql`${rightSelect.getSQL()}`;\n    let orderBySql;\n    if (orderBy && orderBy.length > 0) {\n      const orderByValues = [];\n      for (const singleOrderBy of orderBy) {\n        if (is(singleOrderBy, SQLiteColumn)) {\n          orderByValues.push(sql.identifier(singleOrderBy.name));\n        } else if (is(singleOrderBy, SQL)) {\n          for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n            const chunk = singleOrderBy.queryChunks[i];\n            if (is(chunk, SQLiteColumn)) {\n              singleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n            }\n          }\n          orderByValues.push(sql`${singleOrderBy}`);\n        } else {\n          orderByValues.push(sql`${singleOrderBy}`);\n        }\n      }\n      orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n    }\n    const limitSql = typeof limit === \"object\" || typeof limit === \"number\" && limit >= 0 ? sql` limit ${limit}` : void 0;\n    const operatorChunk = sql.raw(`${type} ${isAll ? \"all \" : \"\"}`);\n    const offsetSql = offset ? sql` offset ${offset}` : void 0;\n    return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n  }\n  buildInsertQuery({ table, values: valuesOrSelect, onConflict, returning, withList, select }) {\n    const valuesSqlList = [];\n    const columns = table[Table.Symbol.Columns];\n    const colEntries = Object.entries(columns).filter(\n      ([_, col]) => !col.shouldDisableInsert()\n    );\n    const insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n    if (select) {\n      const select2 = valuesOrSelect;\n      if (is(select2, SQL)) {\n        valuesSqlList.push(select2);\n      } else {\n        valuesSqlList.push(select2.getSQL());\n      }\n    } else {\n      const values = valuesOrSelect;\n      valuesSqlList.push(sql.raw(\"values \"));\n      for (const [valueIndex, value] of values.entries()) {\n        const valueList = [];\n        for (const [fieldName, col] of colEntries) {\n          const colValue = value[fieldName];\n          if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {\n            let defaultValue;\n            if (col.default !== null && col.default !== void 0) {\n              defaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n            } else if (col.defaultFn !== void 0) {\n              const defaultFnResult = col.defaultFn();\n              defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n            } else if (!col.default && col.onUpdateFn !== void 0) {\n              const onUpdateFnResult = col.onUpdateFn();\n              defaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n            } else {\n              defaultValue = sql`null`;\n            }\n            valueList.push(defaultValue);\n          } else {\n            valueList.push(colValue);\n          }\n        }\n        valuesSqlList.push(valueList);\n        if (valueIndex < values.length - 1) {\n          valuesSqlList.push(sql`, `);\n        }\n      }\n    }\n    const withSql = this.buildWithCTE(withList);\n    const valuesSql = sql.join(valuesSqlList);\n    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;\n    const onConflictSql = onConflict?.length ? sql.join(onConflict) : void 0;\n    return sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n  }\n  sqlToQuery(sql2, invokeSource) {\n    return sql2.toQuery({\n      casing: this.casing,\n      escapeName: this.escapeName,\n      escapeParam: this.escapeParam,\n      escapeString: this.escapeString,\n      invokeSource\n    });\n  }\n  buildRelationalQuery({\n    fullSchema,\n    schema,\n    tableNamesMap,\n    table,\n    tableConfig,\n    queryConfig: config,\n    tableAlias,\n    nestedQueryRelation,\n    joinOn\n  }) {\n    let selection = [];\n    let limit, offset, orderBy = [], where;\n    const joins = [];\n    if (config === true) {\n      const selectionEntries = Object.entries(tableConfig.columns);\n      selection = selectionEntries.map(([key, value]) => ({\n        dbKey: value.name,\n        tsKey: key,\n        field: aliasedTableColumn(value, tableAlias),\n        relationTableTsKey: void 0,\n        isJson: false,\n        selection: []\n      }));\n    } else {\n      const aliasedColumns = Object.fromEntries(\n        Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])\n      );\n      if (config.where) {\n        const whereSql = typeof config.where === \"function\" ? config.where(aliasedColumns, getOperators()) : config.where;\n        where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n      }\n      const fieldsSelection = [];\n      let selectedColumns = [];\n      if (config.columns) {\n        let isIncludeMode = false;\n        for (const [field, value] of Object.entries(config.columns)) {\n          if (value === void 0) {\n            continue;\n          }\n          if (field in tableConfig.columns) {\n            if (!isIncludeMode && value === true) {\n              isIncludeMode = true;\n            }\n            selectedColumns.push(field);\n          }\n        }\n        if (selectedColumns.length > 0) {\n          selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n        }\n      } else {\n        selectedColumns = Object.keys(tableConfig.columns);\n      }\n      for (const field of selectedColumns) {\n        const column = tableConfig.columns[field];\n        fieldsSelection.push({ tsKey: field, value: column });\n      }\n      let selectedRelations = [];\n      if (config.with) {\n        selectedRelations = Object.entries(config.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));\n      }\n      let extras;\n      if (config.extras) {\n        extras = typeof config.extras === \"function\" ? config.extras(aliasedColumns, { sql }) : config.extras;\n        for (const [tsKey, value] of Object.entries(extras)) {\n          fieldsSelection.push({\n            tsKey,\n            value: mapColumnsInAliasedSQLToAlias(value, tableAlias)\n          });\n        }\n      }\n      for (const { tsKey, value } of fieldsSelection) {\n        selection.push({\n          dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,\n          tsKey,\n          field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n          relationTableTsKey: void 0,\n          isJson: false,\n          selection: []\n        });\n      }\n      let orderByOrig = typeof config.orderBy === \"function\" ? config.orderBy(aliasedColumns, getOrderByOperators()) : config.orderBy ?? [];\n      if (!Array.isArray(orderByOrig)) {\n        orderByOrig = [orderByOrig];\n      }\n      orderBy = orderByOrig.map((orderByValue) => {\n        if (is(orderByValue, Column)) {\n          return aliasedTableColumn(orderByValue, tableAlias);\n        }\n        return mapColumnsInSQLToAlias(orderByValue, tableAlias);\n      });\n      limit = config.limit;\n      offset = config.offset;\n      for (const {\n        tsKey: selectedRelationTsKey,\n        queryConfig: selectedRelationConfigValue,\n        relation\n      } of selectedRelations) {\n        const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n        const relationTableName = getTableUniqueName(relation.referencedTable);\n        const relationTableTsName = tableNamesMap[relationTableName];\n        const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n        const joinOn2 = and(\n          ...normalizedRelation.fields.map(\n            (field2, i) => eq(\n              aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),\n              aliasedTableColumn(field2, tableAlias)\n            )\n          )\n        );\n        const builtRelation = this.buildRelationalQuery({\n          fullSchema,\n          schema,\n          tableNamesMap,\n          table: fullSchema[relationTableTsName],\n          tableConfig: schema[relationTableTsName],\n          queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,\n          tableAlias: relationTableAlias,\n          joinOn: joinOn2,\n          nestedQueryRelation: relation\n        });\n        const field = sql`(${builtRelation.sql})`.as(selectedRelationTsKey);\n        selection.push({\n          dbKey: selectedRelationTsKey,\n          tsKey: selectedRelationTsKey,\n          field,\n          relationTableTsKey: relationTableTsName,\n          isJson: true,\n          selection: builtRelation.selection\n        });\n      }\n    }\n    if (selection.length === 0) {\n      throw new DrizzleError({\n        message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`\n      });\n    }\n    let result;\n    where = and(joinOn, where);\n    if (nestedQueryRelation) {\n      let field = sql`json_array(${sql.join(\n        selection.map(\n          ({ field: field2 }) => is(field2, SQLiteColumn) ? sql.identifier(this.casing.getColumnCasing(field2)) : is(field2, SQL.Aliased) ? field2.sql : field2\n        ),\n        sql`, `\n      )})`;\n      if (is(nestedQueryRelation, Many)) {\n        field = sql`coalesce(json_group_array(${field}), json_array())`;\n      }\n      const nestedSelection = [{\n        dbKey: \"data\",\n        tsKey: \"data\",\n        field: field.as(\"data\"),\n        isJson: true,\n        relationTableTsKey: tableConfig.tsName,\n        selection\n      }];\n      const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;\n      if (needsSubquery) {\n        result = this.buildSelectQuery({\n          table: aliasedTable(table, tableAlias),\n          fields: {},\n          fieldsFlat: [\n            {\n              path: [],\n              field: sql.raw(\"*\")\n            }\n          ],\n          where,\n          limit,\n          offset,\n          orderBy,\n          setOperators: []\n        });\n        where = void 0;\n        limit = void 0;\n        offset = void 0;\n        orderBy = void 0;\n      } else {\n        result = aliasedTable(table, tableAlias);\n      }\n      result = this.buildSelectQuery({\n        table: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n        fields: {},\n        fieldsFlat: nestedSelection.map(({ field: field2 }) => ({\n          path: [],\n          field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    } else {\n      result = this.buildSelectQuery({\n        table: aliasedTable(table, tableAlias),\n        fields: {},\n        fieldsFlat: selection.map(({ field }) => ({\n          path: [],\n          field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field\n        })),\n        joins,\n        where,\n        limit,\n        offset,\n        orderBy,\n        setOperators: []\n      });\n    }\n    return {\n      tableTsKey: tableConfig.tsName,\n      sql: result,\n      selection\n    };\n  }\n}\nclass SQLiteSyncDialect extends SQLiteDialect {\n  static [entityKind] = \"SQLiteSyncDialect\";\n  migrate(migrations, session, config) {\n    const migrationsTable = config === void 0 ? \"__drizzle_migrations\" : typeof config === \"string\" ? \"__drizzle_migrations\" : config.migrationsTable ?? \"__drizzle_migrations\";\n    const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n    session.run(migrationTableCreate);\n    const dbMigrations = session.values(\n      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`\n    );\n    const lastDbMigration = dbMigrations[0] ?? void 0;\n    session.run(sql`BEGIN`);\n    try {\n      for (const migration of migrations) {\n        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n          for (const stmt of migration.sql) {\n            session.run(sql.raw(stmt));\n          }\n          session.run(\n            sql`INSERT INTO ${sql.identifier(migrationsTable)} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`\n          );\n        }\n      }\n      session.run(sql`COMMIT`);\n    } catch (e) {\n      session.run(sql`ROLLBACK`);\n      throw e;\n    }\n  }\n}\nclass SQLiteAsyncDialect extends SQLiteDialect {\n  static [entityKind] = \"SQLiteAsyncDialect\";\n  async migrate(migrations, session, config) {\n    const migrationsTable = config === void 0 ? \"__drizzle_migrations\" : typeof config === \"string\" ? \"__drizzle_migrations\" : config.migrationsTable ?? \"__drizzle_migrations\";\n    const migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n    await session.run(migrationTableCreate);\n    const dbMigrations = await session.values(\n      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`\n    );\n    const lastDbMigration = dbMigrations[0] ?? void 0;\n    await session.transaction(async (tx) => {\n      for (const migration of migrations) {\n        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {\n          for (const stmt of migration.sql) {\n            await tx.run(sql.raw(stmt));\n          }\n          await tx.run(\n            sql`INSERT INTO ${sql.identifier(migrationsTable)} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`\n          );\n        }\n      }\n    });\n  }\n}\nexport {\n  SQLiteAsyncDialect,\n  SQLiteDialect,\n  SQLiteSyncDialect\n};\n//# sourceMappingURL=dialect.js.map","import { entityKind } from \"../entity.js\";\nclass TypedQueryBuilder {\n  static [entityKind] = \"TypedQueryBuilder\";\n  /** @internal */\n  getSelectedFields() {\n    return this._.selectedFields;\n  }\n}\nexport {\n  TypedQueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { TypedQueryBuilder } from \"../../query-builders/query-builder.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQL, View } from \"../../sql/sql.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  applyMixins,\n  getTableColumns,\n  getTableLikeName,\n  haveSameKeys,\n  orderSelectedFields\n} from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { SQLiteViewBase } from \"../view-base.js\";\nclass SQLiteSelectBuilder {\n  static [entityKind] = \"SQLiteSelectBuilder\";\n  fields;\n  session;\n  dialect;\n  withList;\n  distinct;\n  constructor(config) {\n    this.fields = config.fields;\n    this.session = config.session;\n    this.dialect = config.dialect;\n    this.withList = config.withList;\n    this.distinct = config.distinct;\n  }\n  from(source) {\n    const isPartialSelect = !!this.fields;\n    let fields;\n    if (this.fields) {\n      fields = this.fields;\n    } else if (is(source, Subquery)) {\n      fields = Object.fromEntries(\n        Object.keys(source._.selectedFields).map((key) => [key, source[key]])\n      );\n    } else if (is(source, SQLiteViewBase)) {\n      fields = source[ViewBaseConfig].selectedFields;\n    } else if (is(source, SQL)) {\n      fields = {};\n    } else {\n      fields = getTableColumns(source);\n    }\n    return new SQLiteSelectBase({\n      table: source,\n      fields,\n      isPartialSelect,\n      session: this.session,\n      dialect: this.dialect,\n      withList: this.withList,\n      distinct: this.distinct\n    });\n  }\n}\nclass SQLiteSelectQueryBuilderBase extends TypedQueryBuilder {\n  static [entityKind] = \"SQLiteSelectQueryBuilder\";\n  _;\n  /** @internal */\n  config;\n  joinsNotNullableMap;\n  tableName;\n  isPartialSelect;\n  session;\n  dialect;\n  cacheConfig = void 0;\n  usedTables = /* @__PURE__ */ new Set();\n  constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {\n    super();\n    this.config = {\n      withList,\n      table,\n      fields: { ...fields },\n      distinct,\n      setOperators: []\n    };\n    this.isPartialSelect = isPartialSelect;\n    this.session = session;\n    this.dialect = dialect;\n    this._ = {\n      selectedFields: fields,\n      config: this.config\n    };\n    this.tableName = getTableLikeName(table);\n    this.joinsNotNullableMap = typeof this.tableName === \"string\" ? { [this.tableName]: true } : {};\n    for (const item of extractUsedTable(table)) this.usedTables.add(item);\n  }\n  /** @internal */\n  getUsedTables() {\n    return [...this.usedTables];\n  }\n  createJoin(joinType) {\n    return (table, on) => {\n      const baseTableName = this.tableName;\n      const tableName = getTableLikeName(table);\n      for (const item of extractUsedTable(table)) this.usedTables.add(item);\n      if (typeof tableName === \"string\" && this.config.joins?.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (!this.isPartialSelect) {\n        if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === \"string\") {\n          this.config.fields = {\n            [baseTableName]: this.config.fields\n          };\n        }\n        if (typeof tableName === \"string\" && !is(table, SQL)) {\n          const selection = is(table, Subquery) ? table._.selectedFields : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];\n          this.config.fields[tableName] = selection;\n        }\n      }\n      if (typeof on === \"function\") {\n        on = on(\n          new Proxy(\n            this.config.fields,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      if (!this.config.joins) {\n        this.config.joins = [];\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName });\n      if (typeof tableName === \"string\") {\n        switch (joinType) {\n          case \"left\": {\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n          case \"right\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"cross\":\n          case \"inner\": {\n            this.joinsNotNullableMap[tableName] = true;\n            break;\n          }\n          case \"full\": {\n            this.joinsNotNullableMap = Object.fromEntries(\n              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])\n            );\n            this.joinsNotNullableMap[tableName] = false;\n            break;\n          }\n        }\n      }\n      return this;\n    };\n  }\n  /**\n   * Executes a `left join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .leftJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  leftJoin = this.createJoin(\"left\");\n  /**\n   * Executes a `right join` operation by adding another table to the current query.\n   *\n   * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .rightJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  rightJoin = this.createJoin(\"right\");\n  /**\n   * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n   *\n   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .innerJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  innerJoin = this.createJoin(\"inner\");\n  /**\n   * Executes a `full join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n   *\n   * @param table the table to join.\n   * @param on the `on` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users and their pets\n   * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .fullJoin(pets, eq(users.id, pets.ownerId))\n   * ```\n   */\n  fullJoin = this.createJoin(\"full\");\n  /**\n   * Executes a `cross join` operation by combining rows from two tables into a new table.\n   *\n   * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}\n   *\n   * @param table the table to join.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all users, each user with every pet\n   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()\n   *   .from(users)\n   *   .crossJoin(pets)\n   *\n   * // Select userId and petId\n   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({\n   *   userId: users.id,\n   *   petId: pets.id,\n   * })\n   *   .from(users)\n   *   .crossJoin(pets)\n   * ```\n   */\n  crossJoin = this.createJoin(\"cross\");\n  createSetOperator(type, isAll) {\n    return (rightSelection) => {\n      const rightSelect = typeof rightSelection === \"function\" ? rightSelection(getSQLiteSetOperators()) : rightSelection;\n      if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n      this.config.setOperators.push({ type, isAll, rightSelect });\n      return this;\n    };\n  }\n  /**\n   * Adds `union` set operator to the query.\n   *\n   * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all unique names from customers and users tables\n   * await db.select({ name: users.name })\n   *   .from(users)\n   *   .union(\n   *     db.select({ name: customers.name }).from(customers)\n   *   );\n   * // or\n   * import { union } from 'drizzle-orm/sqlite-core'\n   *\n   * await union(\n   *   db.select({ name: users.name }).from(users),\n   *   db.select({ name: customers.name }).from(customers)\n   * );\n   * ```\n   */\n  union = this.createSetOperator(\"union\", false);\n  /**\n   * Adds `union all` set operator to the query.\n   *\n   * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all transaction ids from both online and in-store sales\n   * await db.select({ transaction: onlineSales.transactionId })\n   *   .from(onlineSales)\n   *   .unionAll(\n   *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   *   );\n   * // or\n   * import { unionAll } from 'drizzle-orm/sqlite-core'\n   *\n   * await unionAll(\n   *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n   *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n   * );\n   * ```\n   */\n  unionAll = this.createSetOperator(\"union\", true);\n  /**\n   * Adds `intersect` set operator to the query.\n   *\n   * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select course names that are offered in both departments A and B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .intersect(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { intersect } from 'drizzle-orm/sqlite-core'\n   *\n   * await intersect(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  intersect = this.createSetOperator(\"intersect\", false);\n  /**\n   * Adds `except` set operator to the query.\n   *\n   * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all courses offered in department A but not in department B\n   * await db.select({ courseName: depA.courseName })\n   *   .from(depA)\n   *   .except(\n   *     db.select({ courseName: depB.courseName }).from(depB)\n   *   );\n   * // or\n   * import { except } from 'drizzle-orm/sqlite-core'\n   *\n   * await except(\n   *   db.select({ courseName: depA.courseName }).from(depA),\n   *   db.select({ courseName: depB.courseName }).from(depB)\n   * );\n   * ```\n   */\n  except = this.createSetOperator(\"except\", false);\n  /** @internal */\n  addSetOperators(setOperators) {\n    this.config.setOperators.push(...setOperators);\n    return this;\n  }\n  /**\n   * Adds a `where` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n   *\n   * @param where the `where` clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be selected.\n   *\n   * ```ts\n   * // Select all cars with green color\n   * await db.select().from(cars).where(eq(cars.color, 'green'));\n   * // or\n   * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Select all BMW cars with a green color\n   * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Select all cars with the green or blue color\n   * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    if (typeof where === \"function\") {\n      where = where(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.where = where;\n    return this;\n  }\n  /**\n   * Adds a `having` clause to the query.\n   *\n   * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n   *\n   * @param having the `having` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Select all brands with more than one car\n   * await db.select({\n   * \tbrand: cars.brand,\n   * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n   * })\n   *   .from(cars)\n   *   .groupBy(cars.brand)\n   *   .having(({ count }) => gt(count, 1));\n   * ```\n   */\n  having(having) {\n    if (typeof having === \"function\") {\n      having = having(\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n        )\n      );\n    }\n    this.config.having = having;\n    return this;\n  }\n  groupBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const groupBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n    } else {\n      this.config.groupBy = columns;\n    }\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.fields,\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    } else {\n      const orderByArray = columns;\n      if (this.config.setOperators.length > 0) {\n        this.config.setOperators.at(-1).orderBy = orderByArray;\n      } else {\n        this.config.orderBy = orderByArray;\n      }\n    }\n    return this;\n  }\n  /**\n   * Adds a `limit` clause to the query.\n   *\n   * Calling this method will set the maximum number of rows that will be returned by this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param limit the `limit` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the first 10 people from this query.\n   * await db.select().from(people).limit(10);\n   * ```\n   */\n  limit(limit) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).limit = limit;\n    } else {\n      this.config.limit = limit;\n    }\n    return this;\n  }\n  /**\n   * Adds an `offset` clause to the query.\n   *\n   * Calling this method will skip a number of rows when returning results from this query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n   *\n   * @param offset the `offset` clause.\n   *\n   * @example\n   *\n   * ```ts\n   * // Get the 10th-20th people from this query.\n   * await db.select().from(people).offset(10).limit(10);\n   * ```\n   */\n  offset(offset) {\n    if (this.config.setOperators.length > 0) {\n      this.config.setOperators.at(-1).offset = offset;\n    } else {\n      this.config.offset = offset;\n    }\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildSelectQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  as(alias) {\n    const usedTables = [];\n    usedTables.push(...extractUsedTable(this.config.table));\n    if (this.config.joins) {\n      for (const it of this.config.joins) usedTables.push(...extractUsedTable(it.table));\n    }\n    return new Proxy(\n      new Subquery(this.getSQL(), this.config.fields, alias, false, [...new Set(usedTables)]),\n      new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  /** @internal */\n  getSelectedFields() {\n    return new Proxy(\n      this.config.fields,\n      new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n    );\n  }\n  $dynamic() {\n    return this;\n  }\n}\nclass SQLiteSelectBase extends SQLiteSelectQueryBuilderBase {\n  static [entityKind] = \"SQLiteSelect\";\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    if (!this.session) {\n      throw new Error(\"Cannot execute a query on a query builder. Please use a database instance instead.\");\n    }\n    const fieldsList = orderSelectedFields(this.config.fields);\n    const query = this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      fieldsList,\n      \"all\",\n      true,\n      void 0,\n      {\n        type: \"select\",\n        tables: [...this.usedTables]\n      },\n      this.cacheConfig\n    );\n    query.joinsNotNullableMap = this.joinsNotNullableMap;\n    return query;\n  }\n  $withCache(config) {\n    this.cacheConfig = config === void 0 ? { config: {}, enable: true, autoInvalidate: true } : config === false ? { enable: false } : { enable: true, autoInvalidate: true, ...config };\n    return this;\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.all();\n  }\n}\napplyMixins(SQLiteSelectBase, [QueryPromise]);\nfunction createSetOperator(type, isAll) {\n  return (leftSelect, rightSelect, ...restSelects) => {\n    const setOperators = [rightSelect, ...restSelects].map((select) => ({\n      type,\n      isAll,\n      rightSelect: select\n    }));\n    for (const setOperator of setOperators) {\n      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n        throw new Error(\n          \"Set operator error (union / intersect / except): selected fields are not the same or are in a different order\"\n        );\n      }\n    }\n    return leftSelect.addSetOperators(setOperators);\n  };\n}\nconst getSQLiteSetOperators = () => ({\n  union,\n  unionAll,\n  intersect,\n  except\n});\nconst union = createSetOperator(\"union\", false);\nconst unionAll = createSetOperator(\"union\", true);\nconst intersect = createSetOperator(\"intersect\", false);\nconst except = createSetOperator(\"except\", false);\nexport {\n  SQLiteSelectBase,\n  SQLiteSelectBuilder,\n  SQLiteSelectQueryBuilderBase,\n  except,\n  intersect,\n  union,\n  unionAll\n};\n//# sourceMappingURL=select.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteDialect, SQLiteSyncDialect } from \"../dialect.js\";\nimport { WithSubquery } from \"../../subquery.js\";\nimport { SQLiteSelectBuilder } from \"./select.js\";\nclass QueryBuilder {\n  static [entityKind] = \"SQLiteQueryBuilder\";\n  dialect;\n  dialectConfig;\n  constructor(dialect) {\n    this.dialect = is(dialect, SQLiteDialect) ? dialect : void 0;\n    this.dialectConfig = is(dialect, SQLiteDialect) ? void 0 : dialect;\n  }\n  $with = (alias, selection) => {\n    const queryBuilder = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(queryBuilder);\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: void 0,\n        dialect: self.getDialect(),\n        withList: queries,\n        distinct: true\n      });\n    }\n    return { select, selectDistinct };\n  }\n  select(fields) {\n    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: void 0, dialect: this.getDialect() });\n  }\n  selectDistinct(fields) {\n    return new SQLiteSelectBuilder({\n      fields: fields ?? void 0,\n      session: void 0,\n      dialect: this.getDialect(),\n      distinct: true\n    });\n  }\n  // Lazy load dialect to avoid circular dependency\n  getDialect() {\n    if (!this.dialect) {\n      this.dialect = new SQLiteSyncDialect(this.dialectConfig);\n    }\n    return this.dialect;\n  }\n}\nexport {\n  QueryBuilder\n};\n//# sourceMappingURL=query-builder.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { Param, SQL, sql } from \"../../sql/sql.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Columns, Table } from \"../../table.js\";\nimport { haveSameKeys, mapUpdateSet, orderSelectedFields } from \"../../utils.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { QueryBuilder } from \"./query-builder.js\";\nclass SQLiteInsertBuilder {\n  constructor(table, session, dialect, withList) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n  }\n  static [entityKind] = \"SQLiteInsertBuilder\";\n  values(values) {\n    values = Array.isArray(values) ? values : [values];\n    if (values.length === 0) {\n      throw new Error(\"values() must be called with at least one value\");\n    }\n    const mappedValues = values.map((entry) => {\n      const result = {};\n      const cols = this.table[Table.Symbol.Columns];\n      for (const colKey of Object.keys(entry)) {\n        const colValue = entry[colKey];\n        result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n      }\n      return result;\n    });\n    return new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n  }\n  select(selectQuery) {\n    const select = typeof selectQuery === \"function\" ? selectQuery(new QueryBuilder()) : selectQuery;\n    if (!is(select, SQL) && !haveSameKeys(this.table[Columns], select._.selectedFields)) {\n      throw new Error(\n        \"Insert select error: selected fields are not the same or are in a different order compared to the table definition\"\n      );\n    }\n    return new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n  }\n}\nclass SQLiteInsertBase extends QueryPromise {\n  constructor(table, values, session, dialect, withList, select) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { table, values, withList, select };\n  }\n  static [entityKind] = \"SQLiteInsert\";\n  /** @internal */\n  config;\n  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /**\n   * Adds an `on conflict do nothing` clause to the query.\n   *\n   * Calling this method simply avoids inserting a row as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n   *\n   * @param config The `target` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Insert one row and cancel the insert if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing();\n   *\n   * // Explicitly specify conflict target\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoNothing({ target: cars.id });\n   * ```\n   */\n  onConflictDoNothing(config = {}) {\n    if (!this.config.onConflict) this.config.onConflict = [];\n    if (config.target === void 0) {\n      this.config.onConflict.push(sql` on conflict do nothing`);\n    } else {\n      const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n      const whereSql = config.where ? sql` where ${config.where}` : sql``;\n      this.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);\n    }\n    return this;\n  }\n  /**\n   * Adds an `on conflict do update` clause to the query.\n   *\n   * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n   *\n   * @param config The `target`, `set` and `where` clauses.\n   *\n   * @example\n   * ```ts\n   * // Update the row if there's a conflict\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'Porsche' }\n   *   });\n   *\n   * // Upsert with 'where' clause\n   * await db.insert(cars)\n   *   .values({ id: 1, brand: 'BMW' })\n   *   .onConflictDoUpdate({\n   *     target: cars.id,\n   *     set: { brand: 'newBMW' },\n   *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n   *   });\n   * ```\n   */\n  onConflictDoUpdate(config) {\n    if (config.where && (config.targetWhere || config.setWhere)) {\n      throw new Error(\n        'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.'\n      );\n    }\n    if (!this.config.onConflict) this.config.onConflict = [];\n    const whereSql = config.where ? sql` where ${config.where}` : void 0;\n    const targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : void 0;\n    const setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : void 0;\n    const targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n    const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n    this.config.onConflict.push(\n      sql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`\n    );\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildInsertQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"insert\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.config.returning ? this.all() : this.run();\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteInsertBase,\n  SQLiteInsertBuilder\n};\n//# sourceMappingURL=insert.js.map","import { entityKind, is } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport { SelectionProxyHandler } from \"../../selection-proxy.js\";\nimport { SQLiteTable } from \"../table.js\";\nimport { Subquery } from \"../../subquery.js\";\nimport { Table } from \"../../table.js\";\nimport {\n  getTableLikeName,\n  mapUpdateSet,\n  orderSelectedFields\n} from \"../../utils.js\";\nimport { ViewBaseConfig } from \"../../view-common.js\";\nimport { extractUsedTable } from \"../utils.js\";\nimport { SQLiteViewBase } from \"../view-base.js\";\nclass SQLiteUpdateBuilder {\n  constructor(table, session, dialect, withList) {\n    this.table = table;\n    this.session = session;\n    this.dialect = dialect;\n    this.withList = withList;\n  }\n  static [entityKind] = \"SQLiteUpdateBuilder\";\n  set(values) {\n    return new SQLiteUpdateBase(\n      this.table,\n      mapUpdateSet(this.table, values),\n      this.session,\n      this.dialect,\n      this.withList\n    );\n  }\n}\nclass SQLiteUpdateBase extends QueryPromise {\n  constructor(table, set, session, dialect, withList) {\n    super();\n    this.session = session;\n    this.dialect = dialect;\n    this.config = { set, table, withList, joins: [] };\n  }\n  static [entityKind] = \"SQLiteUpdate\";\n  /** @internal */\n  config;\n  from(source) {\n    this.config.from = source;\n    return this;\n  }\n  createJoin(joinType) {\n    return (table, on) => {\n      const tableName = getTableLikeName(table);\n      if (typeof tableName === \"string\" && this.config.joins.some((join) => join.alias === tableName)) {\n        throw new Error(`Alias \"${tableName}\" is already used in this query`);\n      }\n      if (typeof on === \"function\") {\n        const from = this.config.from ? is(table, SQLiteTable) ? table[Table.Symbol.Columns] : is(table, Subquery) ? table._.selectedFields : is(table, SQLiteViewBase) ? table[ViewBaseConfig].selectedFields : void 0 : void 0;\n        on = on(\n          new Proxy(\n            this.config.table[Table.Symbol.Columns],\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          ),\n          from && new Proxy(\n            from,\n            new SelectionProxyHandler({ sqlAliasedBehavior: \"sql\", sqlBehavior: \"sql\" })\n          )\n        );\n      }\n      this.config.joins.push({ on, table, joinType, alias: tableName });\n      return this;\n    };\n  }\n  leftJoin = this.createJoin(\"left\");\n  rightJoin = this.createJoin(\"right\");\n  innerJoin = this.createJoin(\"inner\");\n  fullJoin = this.createJoin(\"full\");\n  /**\n   * Adds a 'where' clause to the query.\n   *\n   * Calling this method will update only those rows that fulfill a specified condition.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param where the 'where' clause.\n   *\n   * @example\n   * You can use conditional operators and `sql function` to filter the rows to be updated.\n   *\n   * ```ts\n   * // Update all cars with green color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(eq(cars.color, 'green'));\n   * // or\n   * db.update(cars).set({ color: 'red' })\n   *   .where(sql`${cars.color} = 'green'`)\n   * ```\n   *\n   * You can logically combine conditional operators with `and()` and `or()` operators:\n   *\n   * ```ts\n   * // Update all BMW cars with a green color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n   *\n   * // Update all cars with the green or blue color\n   * db.update(cars).set({ color: 'red' })\n   *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n   * ```\n   */\n  where(where) {\n    this.config.where = where;\n    return this;\n  }\n  orderBy(...columns) {\n    if (typeof columns[0] === \"function\") {\n      const orderBy = columns[0](\n        new Proxy(\n          this.config.table[Table.Symbol.Columns],\n          new SelectionProxyHandler({ sqlAliasedBehavior: \"alias\", sqlBehavior: \"sql\" })\n        )\n      );\n      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n      this.config.orderBy = orderByArray;\n    } else {\n      const orderByArray = columns;\n      this.config.orderBy = orderByArray;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.config.limit = limit;\n    return this;\n  }\n  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {\n    this.config.returning = orderSelectedFields(fields);\n    return this;\n  }\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildUpdateQuery(this.config);\n  }\n  toSQL() {\n    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n    return rest;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = true) {\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      this.dialect.sqlToQuery(this.getSQL()),\n      this.config.returning,\n      this.config.returning ? \"all\" : \"run\",\n      true,\n      void 0,\n      {\n        type: \"insert\",\n        tables: extractUsedTable(this.config.table)\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  run = (placeholderValues) => {\n    return this._prepare().run(placeholderValues);\n  };\n  all = (placeholderValues) => {\n    return this._prepare().all(placeholderValues);\n  };\n  get = (placeholderValues) => {\n    return this._prepare().get(placeholderValues);\n  };\n  values = (placeholderValues) => {\n    return this._prepare().values(placeholderValues);\n  };\n  async execute() {\n    return this.config.returning ? this.all() : this.run();\n  }\n  $dynamic() {\n    return this;\n  }\n}\nexport {\n  SQLiteUpdateBase,\n  SQLiteUpdateBuilder\n};\n//# sourceMappingURL=update.js.map","import { entityKind } from \"../../entity.js\";\nimport { SQL, sql } from \"../../sql/sql.js\";\nclass SQLiteCountBuilder extends SQL {\n  constructor(params) {\n    super(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n    this.params = params;\n    this.session = params.session;\n    this.sql = SQLiteCountBuilder.buildCount(\n      params.source,\n      params.filters\n    );\n  }\n  sql;\n  static [entityKind] = \"SQLiteCountBuilderAsync\";\n  [Symbol.toStringTag] = \"SQLiteCountBuilderAsync\";\n  session;\n  static buildEmbeddedCount(source, filters) {\n    return sql`(select count(*) from ${source}${sql.raw(\" where \").if(filters)}${filters})`;\n  }\n  static buildCount(source, filters) {\n    return sql`select count(*) from ${source}${sql.raw(\" where \").if(filters)}${filters}`;\n  }\n  then(onfulfilled, onrejected) {\n    return Promise.resolve(this.session.count(this.sql)).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n  catch(onRejected) {\n    return this.then(void 0, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (value) => {\n        onFinally?.();\n        return value;\n      },\n      (reason) => {\n        onFinally?.();\n        throw reason;\n      }\n    );\n  }\n}\nexport {\n  SQLiteCountBuilder\n};\n//# sourceMappingURL=count.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nimport {\n  mapRelationalRow\n} from \"../../relations.js\";\nclass RelationalQueryBuilder {\n  constructor(mode, fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {\n    this.mode = mode;\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n  }\n  static [entityKind] = \"SQLiteAsyncRelationalQueryBuilder\";\n  findMany(config) {\n    return this.mode === \"sync\" ? new SQLiteSyncRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? config : {},\n      \"many\"\n    ) : new SQLiteRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? config : {},\n      \"many\"\n    );\n  }\n  findFirst(config) {\n    return this.mode === \"sync\" ? new SQLiteSyncRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? { ...config, limit: 1 } : { limit: 1 },\n      \"first\"\n    ) : new SQLiteRelationalQuery(\n      this.fullSchema,\n      this.schema,\n      this.tableNamesMap,\n      this.table,\n      this.tableConfig,\n      this.dialect,\n      this.session,\n      config ? { ...config, limit: 1 } : { limit: 1 },\n      \"first\"\n    );\n  }\n}\nclass SQLiteRelationalQuery extends QueryPromise {\n  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config, mode) {\n    super();\n    this.fullSchema = fullSchema;\n    this.schema = schema;\n    this.tableNamesMap = tableNamesMap;\n    this.table = table;\n    this.tableConfig = tableConfig;\n    this.dialect = dialect;\n    this.session = session;\n    this.config = config;\n    this.mode = mode;\n  }\n  static [entityKind] = \"SQLiteAsyncRelationalQuery\";\n  /** @internal */\n  mode;\n  /** @internal */\n  getSQL() {\n    return this.dialect.buildRelationalQuery({\n      fullSchema: this.fullSchema,\n      schema: this.schema,\n      tableNamesMap: this.tableNamesMap,\n      table: this.table,\n      tableConfig: this.tableConfig,\n      queryConfig: this.config,\n      tableAlias: this.tableConfig.tsName\n    }).sql;\n  }\n  /** @internal */\n  _prepare(isOneTimeQuery = false) {\n    const { query, builtQuery } = this._toSQL();\n    return this.session[isOneTimeQuery ? \"prepareOneTimeQuery\" : \"prepareQuery\"](\n      builtQuery,\n      void 0,\n      this.mode === \"first\" ? \"get\" : \"all\",\n      true,\n      (rawRows, mapColumnValue) => {\n        const rows = rawRows.map(\n          (row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n        );\n        if (this.mode === \"first\") {\n          return rows[0];\n        }\n        return rows;\n      }\n    );\n  }\n  prepare() {\n    return this._prepare(false);\n  }\n  _toSQL() {\n    const query = this.dialect.buildRelationalQuery({\n      fullSchema: this.fullSchema,\n      schema: this.schema,\n      tableNamesMap: this.tableNamesMap,\n      table: this.table,\n      tableConfig: this.tableConfig,\n      queryConfig: this.config,\n      tableAlias: this.tableConfig.tsName\n    });\n    const builtQuery = this.dialect.sqlToQuery(query.sql);\n    return { query, builtQuery };\n  }\n  toSQL() {\n    return this._toSQL().builtQuery;\n  }\n  /** @internal */\n  executeRaw() {\n    if (this.mode === \"first\") {\n      return this._prepare(false).get();\n    }\n    return this._prepare(false).all();\n  }\n  async execute() {\n    return this.executeRaw();\n  }\n}\nclass SQLiteSyncRelationalQuery extends SQLiteRelationalQuery {\n  static [entityKind] = \"SQLiteSyncRelationalQuery\";\n  sync() {\n    return this.executeRaw();\n  }\n}\nexport {\n  RelationalQueryBuilder,\n  SQLiteRelationalQuery,\n  SQLiteSyncRelationalQuery\n};\n//# sourceMappingURL=query.js.map","import { entityKind } from \"../../entity.js\";\nimport { QueryPromise } from \"../../query-promise.js\";\nclass SQLiteRaw extends QueryPromise {\n  constructor(execute, getSQL, action, dialect, mapBatchResult) {\n    super();\n    this.execute = execute;\n    this.getSQL = getSQL;\n    this.dialect = dialect;\n    this.mapBatchResult = mapBatchResult;\n    this.config = { action };\n  }\n  static [entityKind] = \"SQLiteRaw\";\n  /** @internal */\n  config;\n  getQuery() {\n    return { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n  }\n  mapResult(result, isFromBatch) {\n    return isFromBatch ? this.mapBatchResult(result) : result;\n  }\n  _prepare() {\n    return this;\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return false;\n  }\n}\nexport {\n  SQLiteRaw\n};\n//# sourceMappingURL=raw.js.map","import { entityKind } from \"../entity.js\";\nimport { SelectionProxyHandler } from \"../selection-proxy.js\";\nimport { sql } from \"../sql/sql.js\";\nimport {\n  QueryBuilder,\n  SQLiteDeleteBase,\n  SQLiteInsertBuilder,\n  SQLiteSelectBuilder,\n  SQLiteUpdateBuilder\n} from \"./query-builders/index.js\";\nimport { WithSubquery } from \"../subquery.js\";\nimport { SQLiteCountBuilder } from \"./query-builders/count.js\";\nimport { RelationalQueryBuilder } from \"./query-builders/query.js\";\nimport { SQLiteRaw } from \"./query-builders/raw.js\";\nclass BaseSQLiteDatabase {\n  constructor(resultKind, dialect, session, schema) {\n    this.resultKind = resultKind;\n    this.dialect = dialect;\n    this.session = session;\n    this._ = schema ? {\n      schema: schema.schema,\n      fullSchema: schema.fullSchema,\n      tableNamesMap: schema.tableNamesMap\n    } : {\n      schema: void 0,\n      fullSchema: {},\n      tableNamesMap: {}\n    };\n    this.query = {};\n    const query = this.query;\n    if (this._.schema) {\n      for (const [tableName, columns] of Object.entries(this._.schema)) {\n        query[tableName] = new RelationalQueryBuilder(\n          resultKind,\n          schema.fullSchema,\n          this._.schema,\n          this._.tableNamesMap,\n          schema.fullSchema[tableName],\n          columns,\n          dialect,\n          session\n        );\n      }\n    }\n    this.$cache = { invalidate: async (_params) => {\n    } };\n  }\n  static [entityKind] = \"BaseSQLiteDatabase\";\n  query;\n  /**\n   * Creates a subquery that defines a temporary named result set as a CTE.\n   *\n   * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param alias The alias for the subquery.\n   *\n   * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n   *\n   * @example\n   *\n   * ```ts\n   * // Create a subquery with alias 'sq' and use it in the select query\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   *\n   * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n   *\n   * ```ts\n   * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n   * const sq = db.$with('sq').as(db.select({\n   *   name: sql<string>`upper(${users.name})`.as('name'),\n   * })\n   * .from(users));\n   *\n   * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n   * ```\n   */\n  $with = (alias, selection) => {\n    const self = this;\n    const as = (qb) => {\n      if (typeof qb === \"function\") {\n        qb = qb(new QueryBuilder(self.dialect));\n      }\n      return new Proxy(\n        new WithSubquery(\n          qb.getSQL(),\n          selection ?? (\"getSelectedFields\" in qb ? qb.getSelectedFields() ?? {} : {}),\n          alias,\n          true\n        ),\n        new SelectionProxyHandler({ alias, sqlAliasedBehavior: \"alias\", sqlBehavior: \"error\" })\n      );\n    };\n    return { as };\n  };\n  $count(source, filters) {\n    return new SQLiteCountBuilder({ source, filters, session: this.session });\n  }\n  /**\n   * Incorporates a previously defined CTE (using `$with`) into the main query.\n   *\n   * This method allows the main query to reference a temporary named result set.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n   *\n   * @param queries The CTEs to incorporate into the main query.\n   *\n   * @example\n   *\n   * ```ts\n   * // Define a subquery 'sq' as a CTE using $with\n   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n   *\n   * // Incorporate the CTE 'sq' into the main query and select from it\n   * const result = await db.with(sq).select().from(sq);\n   * ```\n   */\n  with(...queries) {\n    const self = this;\n    function select(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries\n      });\n    }\n    function selectDistinct(fields) {\n      return new SQLiteSelectBuilder({\n        fields: fields ?? void 0,\n        session: self.session,\n        dialect: self.dialect,\n        withList: queries,\n        distinct: true\n      });\n    }\n    function update(table) {\n      return new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n    }\n    function insert(into) {\n      return new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n    }\n    function delete_(from) {\n      return new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n    }\n    return { select, selectDistinct, update, insert, delete: delete_ };\n  }\n  select(fields) {\n    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: this.session, dialect: this.dialect });\n  }\n  selectDistinct(fields) {\n    return new SQLiteSelectBuilder({\n      fields: fields ?? void 0,\n      session: this.session,\n      dialect: this.dialect,\n      distinct: true\n    });\n  }\n  /**\n   * Creates an update query.\n   *\n   * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n   *\n   * Use `.set()` method to specify which values to update.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/update}\n   *\n   * @param table The table to update.\n   *\n   * @example\n   *\n   * ```ts\n   * // Update all rows in the 'cars' table\n   * await db.update(cars).set({ color: 'red' });\n   *\n   * // Update rows with filters and conditions\n   * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n   *\n   * // Update with returning clause\n   * const updatedCar: Car[] = await db.update(cars)\n   *   .set({ color: 'red' })\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  update(table) {\n    return new SQLiteUpdateBuilder(table, this.session, this.dialect);\n  }\n  $cache;\n  /**\n   * Creates an insert query.\n   *\n   * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/insert}\n   *\n   * @param table The table to insert into.\n   *\n   * @example\n   *\n   * ```ts\n   * // Insert one row\n   * await db.insert(cars).values({ brand: 'BMW' });\n   *\n   * // Insert multiple rows\n   * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n   *\n   * // Insert with returning clause\n   * const insertedCar: Car[] = await db.insert(cars)\n   *   .values({ brand: 'BMW' })\n   *   .returning();\n   * ```\n   */\n  insert(into) {\n    return new SQLiteInsertBuilder(into, this.session, this.dialect);\n  }\n  /**\n   * Creates a delete query.\n   *\n   * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n   *\n   * See docs: {@link https://orm.drizzle.team/docs/delete}\n   *\n   * @param table The table to delete from.\n   *\n   * @example\n   *\n   * ```ts\n   * // Delete all rows in the 'cars' table\n   * await db.delete(cars);\n   *\n   * // Delete rows with filters and conditions\n   * await db.delete(cars).where(eq(cars.color, 'green'));\n   *\n   * // Delete with returning clause\n   * const deletedCar: Car[] = await db.delete(cars)\n   *   .where(eq(cars.id, 1))\n   *   .returning();\n   * ```\n   */\n  delete(from) {\n    return new SQLiteDeleteBase(from, this.session, this.dialect);\n  }\n  run(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.run(sequel),\n        () => sequel,\n        \"run\",\n        this.dialect,\n        this.session.extractRawRunValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.run(sequel);\n  }\n  all(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.all(sequel),\n        () => sequel,\n        \"all\",\n        this.dialect,\n        this.session.extractRawAllValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.all(sequel);\n  }\n  get(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.get(sequel),\n        () => sequel,\n        \"get\",\n        this.dialect,\n        this.session.extractRawGetValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.get(sequel);\n  }\n  values(query) {\n    const sequel = typeof query === \"string\" ? sql.raw(query) : query.getSQL();\n    if (this.resultKind === \"async\") {\n      return new SQLiteRaw(\n        async () => this.session.values(sequel),\n        () => sequel,\n        \"values\",\n        this.dialect,\n        this.session.extractRawValuesValueFromBatchResult.bind(this.session)\n      );\n    }\n    return this.session.values(sequel);\n  }\n  transaction(transaction, config) {\n    return this.session.transaction(transaction, config);\n  }\n}\nconst withReplicas = (primary, replicas, getReplica = () => replicas[Math.floor(Math.random() * replicas.length)]) => {\n  const select = (...args) => getReplica(replicas).select(...args);\n  const selectDistinct = (...args) => getReplica(replicas).selectDistinct(...args);\n  const $count = (...args) => getReplica(replicas).$count(...args);\n  const $with = (...args) => getReplica(replicas).with(...args);\n  const update = (...args) => primary.update(...args);\n  const insert = (...args) => primary.insert(...args);\n  const $delete = (...args) => primary.delete(...args);\n  const run = (...args) => primary.run(...args);\n  const all = (...args) => primary.all(...args);\n  const get = (...args) => primary.get(...args);\n  const values = (...args) => primary.values(...args);\n  const transaction = (...args) => primary.transaction(...args);\n  return {\n    ...primary,\n    update,\n    insert,\n    delete: $delete,\n    run,\n    all,\n    get,\n    values,\n    transaction,\n    $primary: primary,\n    select,\n    selectDistinct,\n    $count,\n    with: $with,\n    get query() {\n      return getReplica(replicas).query;\n    }\n  };\n};\nexport {\n  BaseSQLiteDatabase,\n  withReplicas\n};\n//# sourceMappingURL=db.js.map","import { entityKind } from \"../../entity.js\";\nclass Cache {\n  static [entityKind] = \"Cache\";\n}\nclass NoopCache extends Cache {\n  strategy() {\n    return \"all\";\n  }\n  static [entityKind] = \"NoopCache\";\n  async get(_key) {\n    return void 0;\n  }\n  async put(_hashedQuery, _response, _tables, _config) {\n  }\n  async onMutate(_params) {\n  }\n}\nasync function hashQuery(sql, params) {\n  const dataToHash = `${sql}-${JSON.stringify(params)}`;\n  const encoder = new TextEncoder();\n  const data = encoder.encode(dataToHash);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = [...new Uint8Array(hashBuffer)];\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hashHex;\n}\nexport {\n  Cache,\n  NoopCache,\n  hashQuery\n};\n//# sourceMappingURL=cache.js.map","import { hashQuery, NoopCache } from \"../cache/core/cache.js\";\nimport { entityKind, is } from \"../entity.js\";\nimport { DrizzleError, DrizzleQueryError, TransactionRollbackError } from \"../errors.js\";\nimport { QueryPromise } from \"../query-promise.js\";\nimport { BaseSQLiteDatabase } from \"./db.js\";\nclass ExecuteResultSync extends QueryPromise {\n  constructor(resultCb) {\n    super();\n    this.resultCb = resultCb;\n  }\n  static [entityKind] = \"ExecuteResultSync\";\n  async execute() {\n    return this.resultCb();\n  }\n  sync() {\n    return this.resultCb();\n  }\n}\nclass SQLitePreparedQuery {\n  constructor(mode, executeMethod, query, cache, queryMetadata, cacheConfig) {\n    this.mode = mode;\n    this.executeMethod = executeMethod;\n    this.query = query;\n    this.cache = cache;\n    this.queryMetadata = queryMetadata;\n    this.cacheConfig = cacheConfig;\n    if (cache && cache.strategy() === \"all\" && cacheConfig === void 0) {\n      this.cacheConfig = { enable: true, autoInvalidate: true };\n    }\n    if (!this.cacheConfig?.enable) {\n      this.cacheConfig = void 0;\n    }\n  }\n  static [entityKind] = \"PreparedQuery\";\n  /** @internal */\n  joinsNotNullableMap;\n  /** @internal */\n  async queryWithCache(queryString, params, query) {\n    if (this.cache === void 0 || is(this.cache, NoopCache) || this.queryMetadata === void 0) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (this.cacheConfig && !this.cacheConfig.enable) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if ((this.queryMetadata.type === \"insert\" || this.queryMetadata.type === \"update\" || this.queryMetadata.type === \"delete\") && this.queryMetadata.tables.length > 0) {\n      try {\n        const [res] = await Promise.all([\n          query(),\n          this.cache.onMutate({ tables: this.queryMetadata.tables })\n        ]);\n        return res;\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (!this.cacheConfig) {\n      try {\n        return await query();\n      } catch (e) {\n        throw new DrizzleQueryError(queryString, params, e);\n      }\n    }\n    if (this.queryMetadata.type === \"select\") {\n      const fromCache = await this.cache.get(\n        this.cacheConfig.tag ?? (await hashQuery(queryString, params)),\n        this.queryMetadata.tables,\n        this.cacheConfig.tag !== void 0,\n        this.cacheConfig.autoInvalidate\n      );\n      if (fromCache === void 0) {\n        let result;\n        try {\n          result = await query();\n        } catch (e) {\n          throw new DrizzleQueryError(queryString, params, e);\n        }\n        await this.cache.put(\n          this.cacheConfig.tag ?? (await hashQuery(queryString, params)),\n          result,\n          // make sure we send tables that were used in a query only if user wants to invalidate it on each write\n          this.cacheConfig.autoInvalidate ? this.queryMetadata.tables : [],\n          this.cacheConfig.tag !== void 0,\n          this.cacheConfig.config\n        );\n        return result;\n      }\n      return fromCache;\n    }\n    try {\n      return await query();\n    } catch (e) {\n      throw new DrizzleQueryError(queryString, params, e);\n    }\n  }\n  getQuery() {\n    return this.query;\n  }\n  mapRunResult(result, _isFromBatch) {\n    return result;\n  }\n  mapAllResult(_result, _isFromBatch) {\n    throw new Error(\"Not implemented\");\n  }\n  mapGetResult(_result, _isFromBatch) {\n    throw new Error(\"Not implemented\");\n  }\n  execute(placeholderValues) {\n    if (this.mode === \"async\") {\n      return this[this.executeMethod](placeholderValues);\n    }\n    return new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n  }\n  mapResult(response, isFromBatch) {\n    switch (this.executeMethod) {\n      case \"run\": {\n        return this.mapRunResult(response, isFromBatch);\n      }\n      case \"all\": {\n        return this.mapAllResult(response, isFromBatch);\n      }\n      case \"get\": {\n        return this.mapGetResult(response, isFromBatch);\n      }\n    }\n  }\n}\nclass SQLiteSession {\n  constructor(dialect) {\n    this.dialect = dialect;\n  }\n  static [entityKind] = \"SQLiteSession\";\n  prepareOneTimeQuery(query, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {\n    return this.prepareQuery(\n      query,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper,\n      queryMetadata,\n      cacheConfig\n    );\n  }\n  run(query) {\n    const staticQuery = this.dialect.sqlToQuery(query);\n    try {\n      return this.prepareOneTimeQuery(staticQuery, void 0, \"run\", false).run();\n    } catch (err) {\n      throw new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n    }\n  }\n  /** @internal */\n  extractRawRunValueFromBatchResult(result) {\n    return result;\n  }\n  all(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).all();\n  }\n  /** @internal */\n  extractRawAllValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n  get(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).get();\n  }\n  /** @internal */\n  extractRawGetValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n  values(query) {\n    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), void 0, \"run\", false).values();\n  }\n  async count(sql) {\n    const result = await this.values(sql);\n    return result[0][0];\n  }\n  /** @internal */\n  extractRawValuesValueFromBatchResult(_result) {\n    throw new Error(\"Not implemented\");\n  }\n}\nclass SQLiteTransaction extends BaseSQLiteDatabase {\n  constructor(resultType, dialect, session, schema, nestedIndex = 0) {\n    super(resultType, dialect, session, schema);\n    this.schema = schema;\n    this.nestedIndex = nestedIndex;\n  }\n  static [entityKind] = \"SQLiteTransaction\";\n  rollback() {\n    throw new TransactionRollbackError();\n  }\n}\nexport {\n  ExecuteResultSync,\n  SQLitePreparedQuery,\n  SQLiteSession,\n  SQLiteTransaction\n};\n//# sourceMappingURL=session.js.map","import { NoopCache } from \"../cache/core/index.js\";\nimport { entityKind } from \"../entity.js\";\nimport { NoopLogger } from \"../logger.js\";\nimport { fillPlaceholders, sql } from \"../sql/sql.js\";\nimport { SQLiteTransaction } from \"../sqlite-core/index.js\";\nimport {\n  SQLitePreparedQuery as PreparedQueryBase,\n  SQLiteSession\n} from \"../sqlite-core/session.js\";\nimport { mapResultRow } from \"../utils.js\";\nclass BetterSQLiteSession extends SQLiteSession {\n  constructor(client, dialect, schema, options = {}) {\n    super(dialect);\n    this.client = client;\n    this.schema = schema;\n    this.logger = options.logger ?? new NoopLogger();\n    this.cache = options.cache ?? new NoopCache();\n  }\n  static [entityKind] = \"BetterSQLiteSession\";\n  logger;\n  cache;\n  prepareQuery(query, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {\n    const stmt = this.client.prepare(query.sql);\n    return new PreparedQuery(\n      stmt,\n      query,\n      this.logger,\n      this.cache,\n      queryMetadata,\n      cacheConfig,\n      fields,\n      executeMethod,\n      isResponseInArrayMode,\n      customResultMapper\n    );\n  }\n  transaction(transaction, config = {}) {\n    const tx = new BetterSQLiteTransaction(\"sync\", this.dialect, this, this.schema);\n    const nativeTx = this.client.transaction(transaction);\n    return nativeTx[config.behavior ?? \"deferred\"](tx);\n  }\n}\nclass BetterSQLiteTransaction extends SQLiteTransaction {\n  static [entityKind] = \"BetterSQLiteTransaction\";\n  transaction(transaction) {\n    const savepointName = `sp${this.nestedIndex}`;\n    const tx = new BetterSQLiteTransaction(\"sync\", this.dialect, this.session, this.schema, this.nestedIndex + 1);\n    this.session.run(sql.raw(`savepoint ${savepointName}`));\n    try {\n      const result = transaction(tx);\n      this.session.run(sql.raw(`release savepoint ${savepointName}`));\n      return result;\n    } catch (err) {\n      this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n      throw err;\n    }\n  }\n}\nclass PreparedQuery extends PreparedQueryBase {\n  constructor(stmt, query, logger, cache, queryMetadata, cacheConfig, fields, executeMethod, _isResponseInArrayMode, customResultMapper) {\n    super(\"sync\", executeMethod, query, cache, queryMetadata, cacheConfig);\n    this.stmt = stmt;\n    this.logger = logger;\n    this.fields = fields;\n    this._isResponseInArrayMode = _isResponseInArrayMode;\n    this.customResultMapper = customResultMapper;\n  }\n  static [entityKind] = \"BetterSQLitePreparedQuery\";\n  run(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.stmt.run(...params);\n  }\n  all(placeholderValues) {\n    const { fields, joinsNotNullableMap, query, logger, stmt, customResultMapper } = this;\n    if (!fields && !customResultMapper) {\n      const params = fillPlaceholders(query.params, placeholderValues ?? {});\n      logger.logQuery(query.sql, params);\n      return stmt.all(...params);\n    }\n    const rows = this.values(placeholderValues);\n    if (customResultMapper) {\n      return customResultMapper(rows);\n    }\n    return rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));\n  }\n  get(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    const { fields, stmt, joinsNotNullableMap, customResultMapper } = this;\n    if (!fields && !customResultMapper) {\n      return stmt.get(...params);\n    }\n    const row = stmt.raw().get(...params);\n    if (!row) {\n      return void 0;\n    }\n    if (customResultMapper) {\n      return customResultMapper([row]);\n    }\n    return mapResultRow(fields, row, joinsNotNullableMap);\n  }\n  values(placeholderValues) {\n    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n    this.logger.logQuery(this.query.sql, params);\n    return this.stmt.raw().all(...params);\n  }\n  /** @internal */\n  isResponseInArrayMode() {\n    return this._isResponseInArrayMode;\n  }\n}\nexport {\n  BetterSQLiteSession,\n  BetterSQLiteTransaction,\n  PreparedQuery\n};\n//# sourceMappingURL=session.js.map","import Client from \"better-sqlite3\";\nimport { entityKind } from \"../entity.js\";\nimport { DefaultLogger } from \"../logger.js\";\nimport {\n  createTableRelationsHelpers,\n  extractTablesRelationalConfig\n} from \"../relations.js\";\nimport { BaseSQLiteDatabase } from \"../sqlite-core/db.js\";\nimport { SQLiteSyncDialect } from \"../sqlite-core/dialect.js\";\nimport { isConfig } from \"../utils.js\";\nimport { BetterSQLiteSession } from \"./session.js\";\nclass BetterSQLite3Database extends BaseSQLiteDatabase {\n  static [entityKind] = \"BetterSQLite3Database\";\n}\nfunction construct(client, config = {}) {\n  const dialect = new SQLiteSyncDialect({ casing: config.casing });\n  let logger;\n  if (config.logger === true) {\n    logger = new DefaultLogger();\n  } else if (config.logger !== false) {\n    logger = config.logger;\n  }\n  let schema;\n  if (config.schema) {\n    const tablesConfig = extractTablesRelationalConfig(\n      config.schema,\n      createTableRelationsHelpers\n    );\n    schema = {\n      fullSchema: config.schema,\n      schema: tablesConfig.tables,\n      tableNamesMap: tablesConfig.tableNamesMap\n    };\n  }\n  const session = new BetterSQLiteSession(client, dialect, schema, { logger });\n  const db = new BetterSQLite3Database(\"sync\", dialect, session, schema);\n  db.$client = client;\n  return db;\n}\nfunction drizzle(...params) {\n  if (params[0] === void 0 || typeof params[0] === \"string\") {\n    const instance = params[0] === void 0 ? new Client() : new Client(params[0]);\n    return construct(instance, params[1]);\n  }\n  if (isConfig(params[0])) {\n    const { connection, client, ...drizzleConfig } = params[0];\n    if (client) return construct(client, drizzleConfig);\n    if (typeof connection === \"object\") {\n      const { source, ...options } = connection;\n      const instance2 = new Client(source, options);\n      return construct(instance2, drizzleConfig);\n    }\n    const instance = new Client(connection);\n    return construct(instance, drizzleConfig);\n  }\n  return construct(params[0], params[1]);\n}\n((drizzle2) => {\n  function mock(config) {\n    return construct({}, config);\n  }\n  drizzle2.mock = mock;\n})(drizzle || (drizzle = {}));\nexport {\n  BetterSQLite3Database,\n  drizzle\n};\n//# sourceMappingURL=driver.js.map","import crypto from \"node:crypto\";\nimport fs from \"node:fs\";\nfunction readMigrationFiles(config) {\n  const migrationFolderTo = config.migrationsFolder;\n  const migrationQueries = [];\n  const journalPath = `${migrationFolderTo}/meta/_journal.json`;\n  if (!fs.existsSync(journalPath)) {\n    throw new Error(`Can't find meta/_journal.json file`);\n  }\n  const journalAsString = fs.readFileSync(`${migrationFolderTo}/meta/_journal.json`).toString();\n  const journal = JSON.parse(journalAsString);\n  for (const journalEntry of journal.entries) {\n    const migrationPath = `${migrationFolderTo}/${journalEntry.tag}.sql`;\n    try {\n      const query = fs.readFileSync(`${migrationFolderTo}/${journalEntry.tag}.sql`).toString();\n      const result = query.split(\"--> statement-breakpoint\").map((it) => {\n        return it;\n      });\n      migrationQueries.push({\n        sql: result,\n        bps: journalEntry.breakpoints,\n        folderMillis: journalEntry.when,\n        hash: crypto.createHash(\"sha256\").update(query).digest(\"hex\")\n      });\n    } catch {\n      throw new Error(`No file ${migrationPath} found in ${migrationFolderTo} folder`);\n    }\n  }\n  return migrationQueries;\n}\nexport {\n  readMigrationFiles\n};\n//# sourceMappingURL=migrator.js.map","import { readMigrationFiles } from \"../migrator.js\";\nfunction migrate(db, config) {\n  const migrations = readMigrationFiles(config);\n  db.dialect.migrate(migrations, db.session, config);\n}\nexport {\n  migrate\n};\n//# sourceMappingURL=migrator.js.map","import { sqliteTable, text, integer, real } from \"drizzle-orm/sqlite-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Companies table\nexport const companies = sqliteTable(\"companies\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  industry: text(\"industry\"),\n  size: text(\"size\"),\n  type: text(\"type\"),\n  location: text(\"location\"),\n  website: text(\"website\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  yearFounded: integer(\"year_founded\"),\n  excitementLevel: integer(\"excitement_level\").notNull().default(3),\n  glassdoorRating: real(\"glassdoor_rating\"),\n  notes: text(\"notes\"),\n});\n\n// Jobs table\nexport const jobs = sqliteTable(\"jobs\", {\n  id: text(\"id\").primaryKey(),\n  jobTitle: text(\"job_title\").notNull(),\n  companyId: text(\"company_id\")\n    .notNull()\n    .references(() => companies.id),\n  jobUrl: text(\"job_url\"),\n  applicationUrl: text(\"application_url\"),\n  department: text(\"department\"),\n  jobType: text(\"job_type\").notNull(),\n  seniorityLevel: text(\"seniority_level\").notNull(),\n  salaryMin: integer(\"salary_min\"),\n  salaryMax: integer(\"salary_max\"),\n  location: text(\"location\").notNull(),\n  datePosted: text(\"date_posted\"), // SQLite doesn't have native date type\n  dateSaved: text(\"date_saved\").notNull(),\n  dateApplied: text(\"date_applied\"),\n  deadline: text(\"deadline\"),\n  status: text(\"status\").notNull(),\n  rejectionDate: text(\"rejection_date\"),\n  rejectionStage: text(\"rejection_stage\"),\n  excitementLevel: integer(\"excitement_level\").notNull(),\n  notes: text(\"notes\"),\n  followUpDate: text(\"follow_up_date\"),\n  source: text(\"source\").notNull(),\n});\n\n// Contacts table\nexport const contacts = sqliteTable(\"contacts\", {\n  id: text(\"id\").primaryKey(),\n  fullName: text(\"full_name\").notNull(),\n  companyId: text(\"company_id\").references(() => companies.id),\n  jobTitle: text(\"job_title\"),\n  location: text(\"location\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  relationship: text(\"relationship\").notNull(),\n  goal: text(\"goal\").notNull(),\n  status: text(\"status\").notNull(),\n  followUpDate: text(\"follow_up_date\"),\n  notes: text(\"notes\"),\n});\n\n// Job-Contact relationships (many-to-many)\nexport const jobContacts = sqliteTable(\"job_contacts\", {\n  jobId: text(\"job_id\")\n    .notNull()\n    .references(() => jobs.id, { onDelete: \"cascade\" }),\n  contactId: text(\"contact_id\")\n    .notNull()\n    .references(() => contacts.id, { onDelete: \"cascade\" }),\n  relationshipType: text(\"relationship_type\").notNull(),\n});\n\n// Job status history for analytics\nexport const jobStatusHistory = sqliteTable(\"job_status_history\", {\n  id: text(\"id\").primaryKey(),\n  jobId: text(\"job_id\")\n    .notNull()\n    .references(() => jobs.id, { onDelete: \"cascade\" }),\n  oldStatus: text(\"old_status\"),\n  newStatus: text(\"new_status\").notNull(),\n  changedAt: text(\"changed_at\").notNull(),\n  notes: text(\"notes\"),\n});\n\n// Define relationships\nexport const companiesRelations = relations(companies, ({ many }) => ({\n  jobs: many(jobs),\n  contacts: many(contacts),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [jobs.companyId],\n    references: [companies.id],\n  }),\n  statusHistory: many(jobStatusHistory),\n  jobContacts: many(jobContacts),\n}));\n\nexport const contactsRelations = relations(contacts, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [contacts.companyId],\n    references: [companies.id],\n  }),\n  jobContacts: many(jobContacts),\n}));\n\nexport const jobContactsRelations = relations(jobContacts, ({ one }) => ({\n  job: one(jobs, {\n    fields: [jobContacts.jobId],\n    references: [jobs.id],\n  }),\n  contact: one(contacts, {\n    fields: [jobContacts.contactId],\n    references: [contacts.id],\n  }),\n}));\n\nexport const jobStatusHistoryRelations = relations(jobStatusHistory, ({ one }) => ({\n  job: one(jobs, {\n    fields: [jobStatusHistory.jobId],\n    references: [jobs.id],\n  }),\n}));\n","import Database from \"better-sqlite3\";\nimport { drizzle } from \"drizzle-orm/better-sqlite3\";\nimport { migrate } from \"drizzle-orm/better-sqlite3/migrator\";\nimport * as schema from \"./schema\";\nimport { join, dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nlet db: ReturnType<typeof drizzle>;\n\nexport function initializeDatabase(dbPath?: string) {\n  let finalDbPath: string;\n\n  if (dbPath) {\n    finalDbPath = dbPath;\n  } else {\n    // Check if we're in Electron environment\n    try {\n      // Dynamic import for electron in ES modules\n      const electron = eval('require(\"electron\")');\n      const userDataPath = electron.app.getPath(\"userData\");\n      finalDbPath = join(userDataPath, \"job-search-tracker.db\");\n    } catch {\n      // Fallback for non-Electron environments (like tests)\n      finalDbPath = join(process.cwd(), \"job-search-tracker.db\");\n    }\n  }\n\n  // Create SQLite connection\n  const sqlite = new Database(finalDbPath);\n\n  // Enable foreign keys\n  sqlite.pragma(\"foreign_keys = ON\");\n\n  // Create Drizzle instance\n  db = drizzle(sqlite, { schema });\n\n  // Run migrations\n  try {\n    migrate(db, { migrationsFolder: join(__dirname, \"../../drizzle\") });\n  } catch (error) {\n    console.warn(\"Migration failed, this might be expected in test environment:\", error);\n  }\n\n  return db;\n}\n\nexport function getDatabase() {\n  if (!db) {\n    // Auto-initialize for non-Electron environments\n    return initializeDatabase();\n  }\n  return db;\n}\n","import { app, BrowserWindow } from \"electron\";\nimport { join } from \"path\";\nimport { initializeDatabase } from \"../src/database/connection\";\n\nconst isDev = process.env.NODE_ENV === \"development\";\n\nfunction createWindow(): void {\n  const mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: join(__dirname, \"preload.js\"),\n    },\n  });\n\n  if (isDev) {\n    mainWindow.loadURL(\"http://localhost:5173\");\n    mainWindow.webContents.openDevTools();\n  } else {\n    mainWindow.loadFile(join(__dirname, \"../dist/index.html\"));\n  }\n}\n\napp.whenReady().then(async () => {\n  // Initialize database before creating window\n  try {\n    await initializeDatabase();\n    console.log(\"Database initialized successfully\");\n  } catch (error) {\n    console.error(\"Failed to initialize database:\", error);\n  }\n\n  createWindow();\n\n  app.on(\"activate\", function () {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow();\n  });\n});\n\napp.on(\"window-all-closed\", function () {\n  if (process.platform !== \"darwin\") app.quit();\n});\n"],"names":["schema","sql","join","InlineForeignKeys","PreparedQueryBase","db","crypto","__dirname","Database"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]}